{"version":3,"sources":["logo.svg","component/layout/Layout_01.js","utils/component/confirmation.js","utils/Constants.js","component/header/Header_01.js","utils/component/Loading.js","component/page/Login.js","utils/component/notification.js","component/page/component/Page_01.js","component/page/component/InventoryFormTable.js","utils/ApolloClientAPI.js","utils/qiniuAPI.js","component/page/component/ProductForm.js","component/page/Products.js","component/page/Inventory.js","component/page/component/OrderInfo.js","component/page/Orders.js","utils/component/PrivateRoute.js","utils/component/PublicRoute.js","utils/component/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout_01","props","id","className","header","children","footer","confirmation","type","content","callback","config","title","toUpperCase","icon","ExclamationCircleOutlined","okType","onCancel","destroyAll","GET_CONFIG_CACHE","gql","GET_LOGGEDINUSER_CACHE","GET_USERCONFIG_QUERY","setUser","data","DefaultClientAPI","client","writeQuery","query","user","getUser","a","result","readQuery","success","then","loggedInUser","console","log","catch","err","handleConfigOuput","Object","assign","defaultImage","imageSrc","defaultImage_system","getConfig","configId","userConfig","LOGOUT_MUTATION","Header_01","apolloClient","useApolloClient","routeHistory","useHistory","useState","setConfig","useMutation","onCompleted","logout","writeData","push","useEffect","runAsyncFunc","menuCollapsed","setMenuCollapsed","menuItem","name","route","data-header-collapsed","shape","ArrowLeftOutlined","rotate","map","aMenuItem","index","buttonProps","location","pathname","key","onClick","placement","getMenuItemDisplay","style","cursor","LogoutOutlined","Loading","showLoading","LoadingOutlined","LOGIN_MUTATION","layout","labelCol","span","wrapperCol","tailLayout","offset","Login","login","message","description","notification","loading","initialValues","remember","onFinish","values","variables","onFinishFailed","errorInfo","Item","label","rules","required","Password","valuePropName","htmlType","Page_01","rest","Fragment","Search","EditableContext","React","createContext","EditableRow","useForm","form","component","Provider","value","EditableCell","editable","dataIndex","record","handleSave","isVariant","restProps","editing","setEditing","inputRef","useRef","useContext","current","focus","toggleEdit","setFieldsValue","save","e","validateFields","childNode","margin","width","height","ref","onPressEnter","onBlur","paddingRight","min","step","formatter","replace","parser","InventoryFormTable","productId","inventoryData","setInventoryData","productVariants","setProductVariants","newColModal","setNewColModal","handleRemoveColumn","selectedCol","restVariant","newInventory","anInventory","handleUpdatePublished","selectedRow","checked","preventDefault","updateIndex","aData","indexOf","update","published","$set","handleDeleteRow","filter","item","row","newData","findIndex","splice","components","body","cell","columnsObj","variantColKeys","keys","defaultColumns","fixed","sorter","b","price","stock","align","render","text","textAlign","checkedChildren","unCheckedChildren","onChange","filterIcon","PlusOutlined","filterDropdown","padding","display","visible","enterButton","CheckOutlined","onSearch","confirm","newVariantId","Date","getTime","length","onConfirm","DeleteOutlined","aColKey","ellipsis","EditOutlined","defaultValue","editVariant","marginLeft","onFilter","concat","getColumns","col","onCell","_id","marginRight","marginBottom","disabled","rowClassName","bordered","dataSource","columns","size","pagination","scroll","x","bodyStyle","paddingBottom","onOk","newVariantValue","getFieldValue","variantName","resetFields","maxLength","ApolloClientAPI","middletierURL","cache","InMemoryCache","addTypename","ApolloClient","link","HttpLink","uri","credentials","params","Promise","resolve","reject","mutation","mutate","QINIU_UPLOAD_TOKEN_QUERY","QINIU_BATCH_DELETE_QUERY","qiniuAPI","qiniuToken","upload","file","fileObj","originFileObj","useCdnDomain","region","qiniu","z0","putExtra","fname","mimeType","response","uploadToken","subscribe","next","res","error","complete","batchDelete","images","Panel","Option","READ_PRODUCT_INVENTORY_QUERY","BULK_UPDATE_INVENTORY_QUERY","CREATE_NEW_PRODUCT_QUERY","DELETE_PRODUCT_QUERY","UPDATE_PRODUCT_QUERY","getDefaultImageArray","array","anImage","fav","getImageFilesToModify","defaultArray","newArray","newImageToUpload","currentUploadedImages","imagesToDelete","allImages","newImageName","imageNameSplited","split","anUploadedImage","delete","uploaded","getBase64","reader","FileReader","readAsDataURL","onload","onerror","ProductInfoForm","product","categories","refetch","modalProps","fileList","setFileList","previewVisible","setPreviewVisible","previewImage","setPreviewImage","productCategory","setProductCategory","newCategoryName","setNewCategoryName","modalVisible","productObj","category","newCategoryFormat","aCategory","variants","readInventory","setModalFooter","getModalFooter","uploadButton","handleFavImageChange","newFileList","aFile","handlePreviewOpen","url","preview","useLazyQuery","fetchPolicy","inventory","flattenedInventory","restInventory","readInventoryResult","bulkUpdateInventory","createProduct","deleteProduct","updateProduct","finalProductValue","foundSelectedCategory","find","imagesToBeModified","QiniuAPI","aNewImage","variantObj","aKey","hasOwnProperty","deletedInventory","aNewInventory","deleted","onDeleteProduct","onCategoryNameChange","target","addNewCategory","modalFooter","submit","unshift","defaultActiveKey","expandIconPosition","TextArea","rows","placeholder","labelInValue","allowClear","dropdownRender","menu","flexWrap","flex","accept","beforeUpload","listType","multiple","onPreview","slice","fileLimit","isFav","StarFilled","color","StarOutlined","getPreviewModalFooter","alt","src","thumbUrl","ProductForm","closeModal","destroyOnClose","wrapClassName","overflow","GET_PRODUCTS_QUERY","UPDATE_PRODUCT_PUBLISH","UPDATE_INVENTORY_PUBLISH","getAllProductCategory","products","aProduct","anItem","Inventory","productFormModal","setProductFormModal","selectedProduct","setSelectedProduct","selectedItems","setSelectedItems","displaySelectionPanel","setDisplaySelectionPanel","useQuery","onError","productsData","refetchProducts","inventoryError","refetchInventory","updateProductPublish","updateInventoryPublish","handleOnClickProduct","createdAt","format","newName","variantKeys","sum","aChild","rowSelection","selectedRowKeys","selectedRows","onSelect","selected","onSelectAll","changeRows","extra","inventoryWithKey","productInventory","getTableData","inventoryIds","productIds","ids","selectionPanel","OrderInfo","order","orientation","column","xxl","xl","lg","md","sm","xs","paid","sentOut","trackingNum","customer","itemLayout","items","renderItem","variant","image","actions","qty","Meta","avatar","total","TabPane","GET_ORDERS_QUERY","UPDATE_ORDER_PAYMENT_QUERY","UPDATE_ORDER_DELIVERY_QUERY","CANCEL_ORDER_QUERY","Orders","orderModalDisplay","setOrderModalDisplay","selectedOrder","setSelectedOrder","refetchOrders","updateOrderPayment","updateOrderDelivery","cancelOrder","whiteSpace","textDecoration","handleOrderModalDisplayOpen","filteredColumns","newOrders","paidOrders","completedOrders","updatedAt","filteredOrders","allOrders","orders","orderList1","orderList2","orderList3","anOrder","getFilteredOrders","tab","rowKey","LOGGEDIN_USER_STATE","PrivateRoute","Component","routeLocation","useLocation","userResult","loggedIn","getUserResult","to","state","from","PublicRoute","restricted","PageNotFound","Component_Layout","Component_Header","GET_USER_STATE","App","Main","exact","path","Boolean","window","hostname","match","theClientAPI","restClient","jsx","GET_LOGGEDIN_USER","GET_USERCONFIG","cacheData","userFound","result2","ReactDOM","document","getElementById","run","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c59e4472.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\n\nconst Layout_01 = (props) => {\n\n  return (\n    <div id=\"layout_01\">\n      <div className=\"wrapper layout_01-wrapper\">\n        <div className=\"header\">\n          {props.header ? props.header : null}\n        </div>\n        <div className=\"content\">\n          {props.children ? props.children : null}\n          <div className=\"footer\">\n            {props.footer ? props.footer : null}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout_01;","\nimport React from 'react';\nimport { Modal, Button } from 'antd';\nimport {\n  ExclamationCircleOutlined\n} from '@ant-design/icons';\n\nconst confirmation = (type, content, callback = null) => {\n  // type: confirm/warning/info/error\n  const config = {\n    title: type && typeof(type) == 'string' ? type.toUpperCase() : \"...\",\n    icon: <ExclamationCircleOutlined />,\n    content: content,\n    okType: 'danger',\n    onCancel: ()=>{\n      Modal.destroyAll();\n    }\n  };\n  if (callback != null) {\n    config['onOk'] = callback;\n  }\n  Modal[type](config);\n}\n\nexport default confirmation;","import gql from \"graphql-tag\";\n\nimport DefaultClientAPI from '../index';\n\n// export const MIDDLETIER_URL = \"http://localhost:443/graphql\";\nexport const MIDDLETIER_URL = \"http://13.124.162.243/graphql\";\n\nexport const defaultImage = \"https://mananml-resources.s3-us-west-2.amazonaws.com/images/HANDROLLINGACCESSORIES/SMOKING60PAPER-RED-2304X1536.jpg\";\n\nconst GET_CONFIG_CACHE = gql`\n  query ROOT_QUERY {\n    config {\n      _id\n      configId\n      defaultImage\n      defaultImage_system\n      imageSrc\n      paymentQRImage\n      server\n    }\n  }\n`\nconst GET_LOGGEDINUSER_CACHE = gql`\n  query ROOT_QUERY {\n    user {\n      success\n      message\n      data {\n        _id\n        username\n        configId\n      } \n    }\n  }\n`\n\nconst GET_USERCONFIG_QUERY = gql`\n  query userConfig($configId: String!) {\n    userConfig(configId: $configId) {\n        success\n        message\n        data\n    }\n  }\n`\nconst GET_LOGGEDINUSER_QUERY = gql`\n  query loggedInUser{\n    loggedInUser{\n        success\n        message\n        data\n    }\n  }\n`\n\nexport const setUser = (data) => {\n  DefaultClientAPI.client.writeQuery({\n    query: GET_LOGGEDINUSER_CACHE,\n    data: {\n      user: data\n    }\n  })\n}\nexport const getUser = async () => {\n  let result = null;\n  const { user } = DefaultClientAPI.client.readQuery({\n    query: GET_LOGGEDINUSER_CACHE,\n  })\n  if (user && user.success) {\n    result = user;\n  }\n  else {\n    await DefaultClientAPI.query(\n      GET_CONFIG_CACHE\n    ).then(({data})=>{\n      if (data.loggedInUser.success) {\n        setUser(data.loggedInUser)\n        result = data.loggedInUser;\n      }\n      else {\n        console.log('get logged in user  false')\n      }\n    }).catch(err=>{\n      console.log('GET_LOGGEDINUSER_QUERY error', err)\n    })\n  }\n  return result;\n}\n\n\nconst handleConfigOuput = (config = null) => {\n  let result = null;\n  if (config) {\n    result = Object.assign({},config);\n    let defaultImage = config.defaultImage ? config.imageSrc + config.defaultImage : config.defaultImage_system\n    result['defaultImage'] = defaultImage;\n  }\n  return result;\n}\n\nexport const getConfig = async () => {\n  let result = null;\n\n  if (DefaultClientAPI) {\n    const { config } = DefaultClientAPI.client.readQuery({\n      query: GET_CONFIG_CACHE,\n    })\n    if (config) {\n      console.log(\"found config cache\")\n      result = handleConfigOuput(config);\n    }\n    else {\n      console.log(\"not found config cache, run query\")\n\n      let user = await getUser();\n      if (user) {\n        console.log('getConfig user',user)\n        await DefaultClientAPI.query(\n          GET_USERCONFIG_QUERY,\n          {\n            configId: user.data.configId\n          }\n        ).then(({data})=>{\n          if (data.userConfig.success) {\n            DefaultClientAPI.client.writeQuery({\n              query: GET_CONFIG_CACHE,\n              data: {\n                config: data.userConfig.data\n              }\n            })\n            result = handleConfigOuput(data.userConfig.data);\n          }\n          else {\n            console.log('get config success false')\n          }\n        }).catch(err=>{\n          console.log('GET_USERCONFIG_QUERY error', err)\n        })\n      }\n    }\n  }\n  console.log('result',result)\n  return result;\n}\n","import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useApolloClient } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport {\n  useHistory\n} from \"react-router-dom\";\nimport { NavHashLink as NavLink } from 'react-router-hash-link';\nimport { Menu, Divider, Button, Tooltip } from 'antd';\nimport {\n  ArrowLeftOutlined,\n  LogoutOutlined\n} from '@ant-design/icons';\nimport confirmation from '../../utils/component/confirmation';\nimport { getConfig } from '../../utils/Constants';\n\nconst LOGOUT_MUTATION = gql`\n    mutation logout {\n      logout {\n        success\n        message\n        data\n      }\n    }\n`;\n\nconst LOGGEDIN_USER_STATE = gql`\n  {\n    user @client {\n      success\n      message\n      data {\n        _id\n        username\n        configId\n      } \n    }\n  }\n`;\n\nconst Header_01 = (props) => {\n  const apolloClient = useApolloClient();\n  let routeHistory = useHistory();\n  const [config , setConfig] = useState(null);\n  const [logout] = useMutation(LOGOUT_MUTATION, {\n    onCompleted: (result) => {\n      if (result && result.logout && result.logout.success) {\n        console.log(\"logged out\")\n        let redirectPath = '/login';\n        // if (routeHistory.location.state && routeHistory.location.state.from) {\n        //   redirectPath = routeHistory.location.state.from.pathname\n        // }\n\n        // apolloClient.resetStore()\n        apolloClient.writeData({\n          data: {\n            user: null,\n            config: null\n          }\n        })\n        routeHistory.push(redirectPath)\n      }\n    }\n  });\n  // const userResult = useQuery(LOGGEDIN_USER_STATE);\n\n  useEffect(() => {\n    const runAsyncFunc = async () => {\n      setConfig(await getConfig())\n    }\n    runAsyncFunc()\n  }, [])\n\n  const [menuCollapsed, setMenuCollapsed] = useState(false);\n  const handleMenuOpen = () => {\n    setMenuCollapsed(true)\n  }\n  const handleMenuClose = () => {\n    setMenuCollapsed(false)\n  }\n\n  const handleLogout = () => {\n    confirmation('confirm', 'Confirm Logout?', ()=>{\n      logout();\n    })\n  }\n\n  const menuItem = [\n    // {\n    //   name: 'Products',\n    //   icon: null,\n    //   route: '/products'\n    // },\n    {\n      name: 'Inventory',\n      icon: null,\n      route: '/'\n    },\n    {\n      name: 'Orders',\n      icon: null,\n      route: '/orders'\n    },\n    // {\n    //   name: 'Configuration',\n    //   icon: null,\n    //   route: '/configuration'\n    // }\n  ]\n\n  const getMenuItemDisplay = () => {\n    let result = [];\n    menuItem.map((aMenuItem,index)=>{\n      let buttonProps = {\n        shape: 'circle'\n      }\n      if (menuCollapsed) {\n        buttonProps['shape'] = 'circle';\n      }\n      else {\n        buttonProps['type'] = 'link'\n      }\n      result.push(\n        <div className={`header_01-item ${routeHistory.location.pathname == aMenuItem.route ? \"header_01-activeLink\" : \"\"}`} key={index} onClick={()=>{\n          routeHistory.push(aMenuItem.route)\n          }}>\n          {\n            menuCollapsed ? \n            <Tooltip title={aMenuItem.name} placement=\"right\">\n              <Button {...buttonProps}>{aMenuItem.name[0].toUpperCase()}</Button>\n            </Tooltip>\n            : <span className={routeHistory.location.pathname == aMenuItem.route ? \"header_01-activeLink\" : \"\"}>{aMenuItem.name}</span>\n          }\n        </div>\n      )\n    });\n    return result;\n  }\n\n  return (\n    <header id=\"header_01\" data-header-collapsed={menuCollapsed}>\n      <div className=\"header_01-header\">\n        <div className=\"header_01-item collapse-btn\">\n           <Button \n              shape=\"circle\" \n              type=\"link\"\n              shape=\"circle\"\n              icon={<ArrowLeftOutlined rotate={menuCollapsed ? 180 : 0} />} \n              onClick={menuCollapsed ? handleMenuClose : handleMenuOpen}\n            />\n          {/* <ArrowLeftOutlined rotate={menuCollapsed ? 180 : 0} onClick={menuCollapsed ? handleMenuClose : handleMenuOpen} /> */}\n        </div>\n      </div>\n\n      <div className=\"header_01-content\">\n        {getMenuItemDisplay()}\n      </div>\n      <div className=\"header_01-footer\">\n        {\n          config && !menuCollapsed ? (\n            <div className=\"header_01-item\" style={{cursor: 'default'}}>\n              { config.configId }\n            </div>\n          ) : null\n        }\n        <div className=\"header_01-item\" onClick={handleLogout}>\n          {\n            menuCollapsed ?\n                <Tooltip title=\"Logout\" placement=\"right\">\n                  <Button \n                    shape=\"circle\" \n                    icon={<LogoutOutlined />} \n                  />\n                </Tooltip>\n              : \n              <span>Logout</span>\n          }\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header_01;","import React, {useState} from 'react';\nimport {\n  LoadingOutlined\n} from '@ant-design/icons';\n\nconst Loading = (props) => {\n  const [showLoading, setShowLoading] = useState(true);\n\n  if (showLoading) {\n    return (\n      <div className=\"loading\">\n        <LoadingOutlined/>\n      </div>\n    )\n  }\n  return null;\n}\n\nexport default Loading;","import React from 'react';\nimport { useMutation, useApolloClient } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport { useHistory } from \"react-router-dom\";\n\nimport Loading from '../../utils/component/Loading';\nimport { setUser } from '../../utils/Constants';\nimport * as notification from '../../utils/component/notification';\n\nconst LOGIN_MUTATION = gql`\n    mutation login($user: JSONObject) {\n      login(user: $user) {\n        success\n        message\n        data\n      }\n    }\n`;\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16,\n  },\n};\n\nconst Login = (props) => {\n  const apolloClient = useApolloClient();\n  let routeHistory = useHistory();\n  const [login, {loading}] = useMutation(LOGIN_MUTATION,{\n    onCompleted: (result)=>{\n      console.log(\"logged in\",result);\n      if (result && result.login && result.login.success) {\n        console.log(\"logged in\",result.login);\n        let redirectPath = '/';\n        // if (routeHistory.location.state && routeHistory.location.state.from) {\n        //   redirectPath = routeHistory.location.state.from.pathname\n        // }\n        // apolloClient.writeData({ data: { user: result.login } })\n        setUser(result.login)\n        routeHistory.push(redirectPath)\n      }\n      else {\n        notification.showMessage({type: 'error',message: \"Failed to login\"})\n      }\n    } \n  });\n\n  const onFinish = values => {\n    console.log(\"on submit login\")\n    login({\n      variables: { user: values }\n    });\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n  return (\n    <div id=\"page_login\">\n      <Form\n        {...layout}\n        name=\"basic\"\n        initialValues={{\n          remember: true,\n        }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n      >\n        <Form.Item\n          label=\"账号\"\n          name=\"username\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your username!',\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"密码\"\n          name=\"password\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your password!',\n            },\n          ]}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\n          <Checkbox>Remember me</Checkbox>\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            登入\n          </Button>\n        </Form.Item>\n      </Form>\n      {\n        loading ? <Loading/> : null\n      }\n    </div>\n  );\n}\n\nexport default Login;","import React from 'react';\nimport { notification, Alert } from 'antd';\n\nexport const showMessage = ({ type, message, description })=>{\n  let options = {};\n  if(type ===\"error\"){\n    options = {\n      duration: 6\n    }\n  }\n  notification[type]({\n    //message: (<Alert message={message} type={type} />),\n    message: message,\n    //description: description,\n    //className: `notification-${type}`,\n    //...options\n  });\n}","import React from 'react';\nimport { PageHeader } from 'antd';\n\nconst Page_01 = (props) => {\n  const {children, ...rest} = props;\n  return (\n    <React.Fragment>\n      <div id=\"page_01\">\n        <PageHeader\n          {...rest}\n        >\n          {props.children}\n        </PageHeader>\n      </div>\n    </React.Fragment>\n  )\n  // return (\n  //   <React.Fragment>\n  //     <div id=\"page_01\">\n  //       <PageHeader\n  //         {...rest}\n  //       >\n  //       </PageHeader>\n  //       {props.children}\n  //     </div>\n  //   </React.Fragment>\n  // )\n}\n\nexport default Page_01;","import React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Table, Input, Button, Popconfirm, Form, InputNumber, Modal, Tooltip, Switch } from 'antd';\nimport { DeleteOutlined, PlusOutlined, EditOutlined, CheckOutlined } from '@ant-design/icons';\nimport update from 'immutability-helper';\n\nconst { Search } = Input;\n\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  isVariant = false,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef();\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex],\n    });\n  };\n\n  const save = async e => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n  if (isVariant) {\n    childNode = editing ? (\n      <Form.Item\n        style={{\n          margin: 0,\n          width: '100%',\n          height: '100%'\n        }}\n        name={dataIndex}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{\n          paddingRight: 24,\n        }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n  else {\n    if (editable) {\n      childNode = editing ? (\n        <Form.Item\n          style={{\n            margin: 0,\n            width: '100%',\n            height: '100%'\n          }}\n          name={dataIndex}\n          rules={[\n            {\n              required: true,\n              message: `${title} is required.`,\n            },\n          ]}\n        >\n          {\n            dataIndex == 'price' ?\n              <InputNumber \n                ref={inputRef} \n                min={0} \n                step={1} \n                formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n                onPressEnter={save} \n                onBlur={save}\n              /> \n              : dataIndex == 'stock' ? \n                <InputNumber \n                  ref={inputRef} \n                  min={0} \n                  step={1} \n                  onPressEnter={save} \n                  onBlur={save}\n                />\n                : <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n          }\n        </Form.Item>\n      ) : (\n        <div\n          className=\"editable-cell-value-wrap\"\n          style={{\n            paddingRight: 24,\n          }}\n          onClick={toggleEdit}\n        >\n          {children}\n        </div>\n      );\n    }\n  }\n\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\nconst InventoryFormTable = (props) => {\n  const { productId, inventoryData, setInventoryData, productVariants, setProductVariants } = props;\n  \n  const [ selectedRows, setSelectedRows ] = useState([]);\n\n  const [ newColModal, setNewColModal ] = useState(false);\n  const [ form ] = Form.useForm();\n\n  const maxInventory = 20;\n  const maxVariants = 4;\n\n  const getColumns = () => {\n    let result = [];\n    let variantColKeys = Object.keys(productVariants);\n\n    let defaultColumns = [\n      {\n        title: 'Price',\n        dataIndex: 'price',\n        editable: true,\n        width: 100,\n        fixed: 'right',\n        sorter: (a, b) => {\n          return a.price - b.price\n        },\n      },\n      {\n        title: 'Stock',\n        dataIndex: 'stock',\n        editable: true,\n        width: 100,\n        fixed: 'right',\n        sorter: (a, b) => {\n          return a.stock - b.stock\n        },\n      },\n      {\n        title: 'Published',\n        dataIndex: 'published',\n        width: 100,\n        fixed: 'right',\n        align: 'center',\n        render: (text, record) => {\n          return (\n              <div style={{width: '100%', textAlign: 'center', cursor: 'pointer'}}>\n                <Switch checkedChildren=\"Active\" unCheckedChildren=\"Inactive\" checked={record.published} onChange={(checked, e)=>{handleUpdatePublished(record, checked, e)}} />\n              </div>\n          )\n          // return (\n          //   record.published ? <Tag color=\"green\">ON</Tag> : <Tag color=\"red\">OFF</Tag>\n          // )\n        } \n      },\n      {\n        title: \"Add Variant\",\n        dataIndex: 'operation',\n        width: 50,\n        align: 'center',\n        fixed: 'right',\n        filterIcon: (<PlusOutlined />),\n        filterDropdown: (props) => {\n          const editVariant = (value) => {\n            props.confirm();\n            if (value) {\n              let newVariantId = 'v' + new Date().getTime();\n              setProductVariants({...productVariants, [newVariantId]: value});\n            }\n          }\n          return (\n            <div style={{padding: '10px', display: 'flex'}}>\n              {\n                props.visible ? \n                  <Search\n                    enterButton={(<CheckOutlined />)}\n                    onSearch={editVariant}\n                    //size=\"small\"\n                  />\n                : null\n              }\n            </div>\n          )\n        }, \n        render: (text, record) =>\n          inventoryData.length >= 1 ? (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDeleteRow(record.key)}>\n              <div style={{width: '100%', textAlign: 'center', cursor: 'pointer'}}><DeleteOutlined /></div>\n            </Popconfirm>\n          ) : null,\n      },\n      // {\n      //   title: (\n      //     <Tooltip title=\"New Variant\">\n      //       <Button\n      //         onClick={()=>{setNewColModal(true)}}\n      //         block\n      //         type='link'\n      //         icon={(<PlusOutlined/>)}\n      //         disabled={variantColKeys.length < maxVariants ? false : true}\n      //       />\n      //     </Tooltip>\n      //   ),\n      //   dataIndex: 'operation',\n      //   width: 50,\n      //   align: 'center',\n      //   fixed: 'right',\n      //   render: (text, record) =>\n      //     inventoryData.length >= 1 ? (\n      //       <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDeleteRow(record.key)}>\n      //         <div style={{width: '100%', textAlign: 'center', cursor: 'pointer'}}><DeleteOutlined /></div>\n      //       </Popconfirm>\n      //     ) : null,\n      // }\n    ];\n\n    // result.push(\n    //   {\n    //     title: 'SKU',\n    //     dataIndex: 'sku',\n    //     width: 150,\n    //     editable: true,\n    //   }\n    // );\n\n    if (variantColKeys && variantColKeys.length > 0) {\n      variantColKeys.map((aColKey)=>{\n        result.push(\n          {\n            title: productVariants[aColKey],\n            dataIndex: aColKey,\n            editable: true,\n            isVariant: true,\n            width: 150,\n            ellipsis: true,\n            sorter: (a, b) => {\n              if (a[aColKey] > b[aColKey]) {\n                  return -1;\n              }\n              if (b[aColKey] > a[aColKey]) {\n                  return 1;\n              }\n              return 0;\n              // return a[aColKey] > b[aColKey]\n            },\n            filterIcon: (<EditOutlined />),\n            filterDropdown: (props) => {\n              const editVariant = (value) => {\n                props.confirm();\n                setProductVariants({...productVariants, [aColKey]: value});\n              }\n              const removeVariant = () => {\n                props.confirm();\n                handleRemoveColumn(aColKey)\n              }\n              return (\n                <div style={{padding: '10px', display: 'flex'}}>\n                  {\n                    props.visible ? \n                    <React.Fragment>\n                      <Search\n                        enterButton={(<CheckOutlined />)}\n                        defaultValue={productVariants[aColKey]}\n                        onSearch={value => editVariant(value)}\n                        //size=\"small\"\n                      />\n                      <Popconfirm title=\"Sure to delete?\" onConfirm={removeVariant}>\n                        <Button type=\"danger\" icon={<DeleteOutlined/>} style={{marginLeft: '5px'}} />\n                      </Popconfirm>\n                    </React.Fragment>\n                    : null\n                  }\n                </div>\n              )\n            }, \n            onFilter: () => {\n              console.log(\"on filter ok\")\n            }\n          }\n        )\n      })\n    }\n    \n    return result.concat(defaultColumns);\n  }\n\n  const handleAddColumn = () => {\n    let newVariantValue = form.getFieldValue();\n    if (newVariantValue && newVariantValue.variantName) {\n      let newVariantId = 'v' + new Date().getTime();\n      setProductVariants({...productVariants, [newVariantId]: newVariantValue.variantName})\n      form.resetFields()\n    }\n    setNewColModal(false);\n  }\n\n  const handleRemoveColumn = (selectedCol) => {\n    const {[selectedCol]: removedCol, ...restVariant} = productVariants;\n    setProductVariants(restVariant)\n    \n    let newInventory = inventoryData.map((anInventory)=>{\n      delete anInventory[selectedCol];\n      return anInventory;\n    })\n    setInventoryData(newInventory)\n  }\n\n  const handleUpdatePublished = (selectedRow, checked, e) => {\n    e.preventDefault();\n    let updateIndex = inventoryData.map((aData)=>aData.key).indexOf(selectedRow.key);\n    setInventoryData(update(inventoryData, {[updateIndex]: {published: {$set: checked}}}));\n  }\n\n  const handleDeleteRow = key => {\n    setInventoryData(inventoryData.filter(item => item.key !== key))\n  };\n\n  const handleAddRow = () => {\n    let newId = new Date().getTime()\n    let defaultData = {\n      key: newId,\n      _id: null,\n      price: 0,\n      stock: 0,\n      published: false,\n      productId: productId\n    };\n    let result = defaultData;\n    if (inventoryData.length > 0) {\n      const {key, _id, published, ...rest} = inventoryData[inventoryData.length - 1];\n      result = {...result, ...rest};\n    }\n    \n    setInventoryData([...inventoryData, result]);\n  };\n\n  const handleSave = row => {\n    const newData = [...inventoryData];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, { ...item, ...row });\n    setInventoryData(newData);\n  };\n\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n  const columnsObj = getColumns().map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return {\n      ...col,\n      onCell: record => ({\n        record,\n        editable: col.editable,\n        dataIndex: col.dataIndex,\n        title: col.title,\n        isVariant: col.isVariant,\n        handleSave: handleSave,\n      }),\n    };\n  });\n\n  const onSelectChange = (selectedRowKeys,selectedRows) => {\n    console.log('selectedRowKeys changed: ', selectedRows);\n    setSelectedRows(selectedRowKeys);\n  };\n\n  const rowSelection = {\n    selectedRows,\n    onChange: onSelectChange,\n    fixed: true\n  };\n\n  return (\n    <div className=\"inventoryTable-main\">\n      <Button\n        onClick={handleAddRow}\n        type=\"primary\"\n        style={{\n          marginRight: 16,\n          marginBottom: 16,\n        }}\n        disabled={inventoryData.length < maxInventory ? false : true}\n        icon={<PlusOutlined/>}\n      >\n        Item\n      </Button>\n      \n      <Table\n        //rowKey={'_id'}\n        components={components}\n        rowClassName={() => 'editable-row'}\n        bordered\n        dataSource={inventoryData}\n        columns={columnsObj}\n        //rowSelection={rowSelection}\n        size={\"small\"}\n        pagination={false}\n        scroll={{ x: (columnsObj.length - 4) * 150 }}\n      />\n        {/* footer={(currentPageData)=>{\n          return (\n            <div>Selecting {selectedRows.length} of {inventoryData.length}</div>\n          )\n        }} */}\n      <Form form={form}>\n      <Modal\n        title=\"New Variant\"\n        width={300}\n        bodyStyle={{paddingBottom: 0}}\n        visible={newColModal}\n        onOk={handleAddColumn}\n        onCancel={()=>{setNewColModal(false)}}\n        //forceRender\n      >\n       \n          <Form.Item \n            name=\"variantName\"\n            rules={[\n              {\n                required: true,\n                message: `Name is required.`,\n              }\n            ]}\n          >\n            <Input maxLength={8}/>\n          </Form.Item>\n      </Modal>\n      </Form>\n    </div>\n  );\n}\n\n\nexport default InventoryFormTable;","import ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nimport { MIDDLETIER_URL } from './Constants';\n\nexport default function ApolloClientAPI(middletierURL = null) {\n  const cache = new InMemoryCache({ addTypename: false });\n  const client = new ApolloClient({\n      cache,\n      link: new HttpLink({\n          uri: middletierURL ? middletierURL : MIDDLETIER_URL,\n          credentials: \"include\"\n      })\n  });\n\n  return {\n    client: client,\n    cache: cache,\n    // query: (query, params={}, callback = null)=>{\n    //   let result = {\n    //     query: query,\n    //     variables: params\n    //   }\n    //   // if (callback != null) {\n    //   //   result['onCompleted'] = callback;\n    //   // }\n    //   return client.query(result)\n    // },\n    // mutation: (query, params={}, callback = null)=>{\n    //   let result = {\n    //     mutation: query,\n    //     variables: params\n    //   }\n    //   // if (callback != null) {\n    //   //   result['onCompleted'] = callback;\n    //   // }\n    //   return client.mutate(result)\n    // },\n    query: async (query, params={})=>{\n      return new Promise((resolve, reject) => {\n        client.query({\n          variables: params,\n          query: query\n        }).then(result=>{\n          resolve(result);\n        }).catch(err=>{\n          reject(err);\n        })\n      })\n    },\n    mutation: async (query, params={})=>{\n      return new Promise((resolve, reject) => {\n        client.mutate({\n          variables: params,\n          mutation: query\n        }).then(result=>{\n          resolve(result);\n        }).catch(err=>{\n          reject(err);\n        })\n      })\n    },\n  }\n}\n","import * as qiniu from 'qiniu-js';\nimport ApolloClientAPI from './ApolloClientAPI';\nimport gql from 'graphql-tag';\n\nconst QINIU_UPLOAD_TOKEN_STATE = gql`\n  {\n    qiniu @client {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst QINIU_UPLOAD_TOKEN_QUERY = gql`\n  {\n    qiniuToken {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst QINIU_BATCH_DELETE_QUERY = gql`\n  mutation qiniuBatchDelete($images: [String!]) {\n    qiniuBatchDelete(images: $images) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst qiniuAPI = async () => {\n  const apolloClient = ApolloClientAPI();\n  let qiniuToken = await apolloClient.query(QINIU_UPLOAD_TOKEN_QUERY).then(result=>result).catch(err=>{});\n\n  return {\n    upload: async (file) => {\n      let fileObj = file.originFileObj\n      var config = {\n        useCdnDomain: true,\n        region: qiniu.region.z0\n      };\n      var putExtra = {\n        fname: \"\",\n        params: {},\n        mimeType: [\"image/png\", \"image/jpeg\", \"image/gif\"]\n      };\n      let key = file.name;\n      return new Promise((resolve, reject) => {\n        console.log('qiniuToken',qiniuToken)\n        if (qiniuToken) {\n          let response = qiniuToken.data.qiniuToken;\n          if (response.success) {\n            let uploadToken = response.data;\n            let observable = qiniu.upload(fileObj, key, uploadToken, putExtra, config)\n\n            observable.subscribe({\n              next(res){\n                console.log('next(res)',res)\n              },\n              error(err){\n                console.log('error(err)',err)\n                reject(err)\n              }, \n              complete(res){\n                console.log('complete(res)',res)\n                resolve(res)\n              }\n            })\n          }\n        }\n        else {\n          reject(\"Error getting token\")\n        }\n        // apolloClient.query(QINIU_UPLOAD_TOKEN_STATE).then(result=>{\n        //   console.log('result',result)\n        //   let response = result.data.qiniu;\n        //   if (response.success) {\n        //     let uploadToken = response.data;\n        //     let observable = qiniu.upload(fileObj, key, uploadToken, putExtra, config)\n          \n        //     observable.subscribe({\n        //       next(res){\n        //         //console.log('next(res)',res)\n        //       },\n        //       error(err){\n        //         console.log('error(err)',err)\n        //         reject(err)\n        //       }, \n        //       complete(res){\n        //         console.log('complete(res)',res)\n        //         resolve(res)\n        //       }\n        //     })\n        //   }\n        // }).catch(err=>{\n        //   console.log('cached qiniu token not found',err)\n          \n        //   apolloClient.query(QINIU_UPLOAD_TOKEN_QUERY).then(result2=>{\n        //     console.log('result2',result2)\n        //     // apolloClient.client.writeQuery({ UPDATE_QINIU_UPLOAD_TOKEN_QUERY, data });\n        //     apolloClient.cache.writeData({data: {qiniu:result2.data.qiniuToken}})\n        //     let response2 = result2.data.qiniuToken;\n        //     if (response2.success) {\n        //       let uploadToken = response2.data;\n        //       let observable = qiniu.upload(fileObj, key, uploadToken, putExtra, config)\n  \n        //       observable.subscribe({\n        //         next(res){\n        //           console.log('next(res)',res)\n        //         },\n        //         error(err){\n        //           console.log('error(err)',err)\n        //           reject(err)\n        //         }, \n        //         complete(res){\n        //           console.log('complete(res)',res)\n        //           resolve(res)\n        //         }\n        //       })\n        //     }\n        //   }).catch(err2=>{\n        //     console.log('err2',err2)\n        //     reject(err2)\n        //   })\n        // })\n\n      })\n\n    },\n    batchDelete: async (images) => {\n      return new Promise((resolve, reject) => {\n        apolloClient.mutation(QINIU_BATCH_DELETE_QUERY,{\n          images: images\n        })\n        .then(result=>resolve(result))\n        .catch(err=>{\n          console.log(err);\n          reject(err)\n        });\n      })\n    }\n  }\n}\n\nexport default qiniuAPI;","import React, {useState, useEffect} from 'react';\nimport { Button, Form, Input, Upload, Modal, Switch, Collapse, Select, Divider } from 'antd';\nimport { useLazyQuery, useMutation, useApolloClient } from \"@apollo/react-hooks\";\nimport { PlusOutlined, StarOutlined, StarFilled } from '@ant-design/icons';\nimport gql from \"graphql-tag\";\n\nimport confirmation from '../../../utils/component/confirmation';\nimport InventoryFormTable from './InventoryFormTable';\n\nimport qiniuAPI from '../../../utils/qiniuAPI';\nimport { getConfig } from '../../../utils/Constants';\n// import ApolloClientAPI from '../../../utils/ApolloClientAPI';\n\nconst { Panel } = Collapse;\nconst { Option } = Select;\n\nconst READ_PRODUCT_INVENTORY_QUERY = gql`\n  query inventory($filter: JSONObject) {\n    inventory(filter: $filter) {\n      _id\n      createdAt\n      updatedAt\n      price\n      stock\n      variants\n      published\n      productId\n    }\n  }\n`;\n\nconst BULK_UPDATE_INVENTORY_QUERY = gql`\n  mutation bulkUpdateInventory($inventory: [JSONObject!]) {\n    bulkUpdateInventory(inventory: $inventory) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst CREATE_NEW_PRODUCT_QUERY = gql`\n  mutation createProduct($product: JSONObject!) {\n    createProduct(product: $product) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst DELETE_PRODUCT_QUERY = gql`\n  mutation deleteProduct($_id: String!) {\n    deleteProduct(_id: $_id) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst UPDATE_PRODUCT_QUERY = gql`\n  mutation updateProduct($product: JSONObject!) {\n    updateProduct(product: $product) {\n      success\n      message\n      data\n    }\n  }\n`;\n\n// convert db image obj to match Upload Component format\nconst getDefaultImageArray = async (array) => {\n  let config = await getConfig()\n  let imageSrc = config.imageSrc;\n  return array.map((anImage)=>{\n    anImage['uid'] = anImage.name;\n    anImage['url'] = imageSrc + anImage.name;\n    anImage['thumbUrl'] = imageSrc + anImage.name;\n    if (anImage.fav) {\n      //anImage['status'] = 'done';\n    }\n    return anImage;\n  })\n}\n\n// mainly for image upload/delete in qiniu\nconst getImageFilesToModify = (defaultArray = [], newArray = []) => {\n  let newImageToUpload = [];\n  let currentUploadedImages = [];\n  let imagesToDelete = []\n  let allImages = []\n\n  newArray.map((anImage,index)=>{\n    // new image to be uploaded\n    let newImageName = anImage.name;\n    if (anImage.originFileObj) {\n      let imageNameSplited = newImageName.split('.');\n      newImageName = `saas_${index}_${new Date().getTime()}_${imageNameSplited[imageNameSplited.length - 2]}.${imageNameSplited[imageNameSplited.length - 1]}`;\n      anImage['name'] = newImageName;\n      newImageToUpload.push(anImage)\n    }\n    // uploaded images\n    else {\n      currentUploadedImages.push(anImage)\n    }\n    // convert Upload Component image obj to match db format\n    allImages.push({\n      name: newImageName,\n      fav: anImage.fav ? anImage.fav : false\n    })\n  });\n\n  defaultArray.map((anImage)=>{\n    let foundIndex = currentUploadedImages.map((anUploadedImage)=>anUploadedImage.name).indexOf(anImage.name);\n    if (foundIndex < 0) {\n      imagesToDelete.push(anImage);\n    }\n  })\n\n  return {\n    upload: newImageToUpload,\n    delete: imagesToDelete,\n    allImages: allImages,\n    uploaded: defaultArray\n  };\n}\n\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}\n\nconst ProductInfoForm = (props) => {\n  const {product = null, categories, refetch, ...modalProps} = props;\n  const fileLimit = 4;\n\n  const [ form ] = Form.useForm();\n  const [ fileList, setFileList ] = useState([]);\n  const [ previewVisible, setPreviewVisible ] = useState(false);\n  const [ previewImage, setPreviewImage ] = useState(null);\n\n  // inventory\n  const [ inventoryData, setInventoryData ] = useState([]);\n  const [ productCategory, setProductCategory ] = useState(categories);\n  const [ newCategoryName, setNewCategoryName ] = useState('');\n  const [ productVariants, setProductVariants ] = useState({'sku': 'SKU'});\n\n  useEffect(() => {\n    if (product && modalProps.modalVisible) {\n      let productObj = Object.assign({},product);\n      if (product.category && product.category.length > 0) {\n        let newCategoryFormat = product.category.map((aCategory)=>{\n          return {\n            key: aCategory._id,\n            label: aCategory.name\n          }\n        })\n        productObj['category'] = newCategoryFormat;\n      }\n      form.setFieldsValue(productObj);\n      if (product.variants) {\n        setProductVariants(product.variants)\n      }\n\n      readInventory({\n        variables: {\n          filter: {\n            filter: { productId: product._id }\n          }\n        }\n      });\n\n      if (product.images && product.images.length > 0) {\n        const runAsyncFunc = async () => {\n          setFileList(await getDefaultImageArray(product.images))\n        }\n        runAsyncFunc()\n      }\n    }\n    else {\n      form.resetFields();\n    }\n    modalProps.setModalFooter(getModalFooter());\n    \n  }, [product, modalProps.modalVisible]);\n\n  const uploadButton = (\n    <div>\n      <PlusOutlined />\n      <div className=\"ant-upload-text\">Upload</div>\n    </div>\n  );\n\n  const handleFileListChange = ({ fileList, ...rest }) => {\n    console.log(\"handleFileListChange,fileList\",fileList)\n    let result = fileList.map((aFile)=>{\n      if (aFile.fav) {\n        //aFile['status'] = 'done';\n      }\n      return aFile;\n    });\n    if (fileList.length > fileLimit) {\n      result = fileList.slice(0, fileLimit-1);\n    }\n    if (result.length > 0) {\n      let foundFavImage = result.find((anImage)=>anImage.fav);\n      if (!foundFavImage) {\n        result[0]['fav'] = true;\n      }\n    }\n    setFileList(result)\n  };\n\n  const handleFavImageChange = () => {\n    let newFileList = [].concat(fileList)\n    newFileList.map((aFile)=>{\n      if (aFile.name == previewImage.name) {\n        aFile['fav'] = true;\n      }\n      else {\n        aFile['fav'] = false;\n      }\n      return aFile;\n    });\n    setFileList(newFileList);\n  }\n\n  const handlePreviewOpen = async (file) => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n    setPreviewVisible(true);\n    setPreviewImage(file);\n  };\n\n  const handlePreviewClose = () => {\n    setPreviewVisible(false);\n  }\n\n  const [readInventory, readInventoryResult ] = useLazyQuery(READ_PRODUCT_INVENTORY_QUERY,{\n    fetchPolicy: \"cache-and-network\",\n    onCompleted: (result) => {\n      console.log(\"readInventory result\",result)\n      if (result && result.inventory) {\n        let flattenedInventory = [];\n        result.inventory.map((anInventory,index)=>{\n          const { variants, ...restInventory } = anInventory;\n          let newInventory = {...restInventory, ...variants, key: restInventory._id};\n          flattenedInventory.push(newInventory);\n        })\n        console.log('flattenedInventory',flattenedInventory)\n        setInventoryData(flattenedInventory);\n      }\n\n    }\n  })\n\n  const [bulkUpdateInventory] = useMutation(BULK_UPDATE_INVENTORY_QUERY,{\n    onCompleted: (result) => {\n      console.log(\"bulkUpdateInventory result\",result)\n    }\n  })\n\n  const [createProduct, createProductResult ] = useMutation(CREATE_NEW_PRODUCT_QUERY,{\n    onCompleted: (result) => {\n      console.log(\"createProduct result\",result)\n      modalProps.onCancel();\n      refetch();\n    }\n  })\n  const [deleteProduct] = useMutation(DELETE_PRODUCT_QUERY,{\n    onCompleted: (result) => {\n      console.log(\"deleteProduct result\",result)\n      modalProps.onCancel();\n      refetch();\n    }\n  })\n  const [updateProduct, updateProductResult ] = useMutation(UPDATE_PRODUCT_QUERY,{\n    onCompleted: (result) => {\n      console.log(\"updateProduct result\",result)\n      modalProps.onCancel();\n      refetch();\n    }\n  })\n\n  const onFinish = async (values) => {\n    console.log(\"onFinish\", values)\n    \n    let finalProductValue = {\n      ...values,\n      images: [], \n      variants: productVariants\n    }\n\n    if (!values._id) {\n      delete finalProductValue._id;\n    }\n    \n    if (values.category) {\n      let foundSelectedCategory = productCategory.find(aCategory=>aCategory._id == values.category.key);\n      if (foundSelectedCategory) {\n        finalProductValue['category'] = [foundSelectedCategory];\n      }\n    }\n    else {\n      finalProductValue['category'] = [];\n    }\n\n    let imagesToBeModified = getImageFilesToModify(product && product.images ? product.images : [], fileList);\n    if (imagesToBeModified.upload.length > 0 || imagesToBeModified.delete.length > 0) {\n      finalProductValue['images'] = imagesToBeModified.allImages;\n    }\n\n    const QiniuAPI = await qiniuAPI();\n\n    if (imagesToBeModified.upload.length > 0) {\n      imagesToBeModified.upload.map(async (aNewImage)=>{\n        await QiniuAPI.upload(aNewImage)\n      })\n    }\n    if (imagesToBeModified.delete.length > 0) {\n      await QiniuAPI.batchDelete(imagesToBeModified.delete.map(anImage=>anImage.name))\n    }\n\n    if (!product) {\n      createProduct({\n        variables: {\n          product: finalProductValue\n        }\n      })\n    }\n    else {\n\n      updateProduct({\n        variables: {\n          product: {...finalProductValue, _id: product._id}\n        }\n      })\n\n      let newInventory = [...inventoryData];\n      newInventory = newInventory.map((anInventory)=>{\n        const { key, ...restInventory} = anInventory;\n\n        //delete anInventory.key;\n        let variantObj = {}\n        Object.keys(productVariants).map((aKey)=>{\n          if (restInventory.hasOwnProperty(aKey)) {\n            variantObj[aKey] = restInventory[aKey];\n            delete restInventory[aKey];\n          }\n        });\n        restInventory['variants'] = variantObj;\n        return restInventory;\n      });\n      console.log(\"newInventory\",newInventory)\n      let deletedInventory = []\n      if (readInventoryResult.data && readInventoryResult.data.inventory) {\n        readInventoryResult.data.inventory.map((anInventory)=>{\n          let foundInventory = newInventory.map((aNewInventory)=>{return aNewInventory._id}).indexOf(anInventory._id);\n          if (foundInventory < 0) {\n            deletedInventory.push({...anInventory, deleted: true});\n          }\n        })\n      } \n\n      bulkUpdateInventory(\n        {\n          variables: {\n            inventory: newInventory.concat(deletedInventory)\n          }\n        }\n      )\n\n    }\n  }\n\n  const onDeleteProduct = () => {\n    confirmation('confirm',\"Confirm delete?\",async ()=>{\n      if (product.images && product.images.length > 0) {\n        const QiniuAPI = await qiniuAPI();\n        await QiniuAPI.batchDelete(product.images.map(anImage=>anImage.name))\n      }\n      deleteProduct({variables:{_id: product._id}})\n    })\n  }\n\n  // const checkFormTouched = () => {\n  //   console.log('isFieldsTouched',form.isFieldTouched('name'));\n  // }\n\n  const onCategoryNameChange = (e) => {\n    setNewCategoryName(e.target.value);\n  }\n\n  const addNewCategory = () => {\n    setProductCategory([...productCategory, {\n      _id: `category_${newCategoryName}_${new Date().getTime()}`,\n      name: newCategoryName\n    }]);\n    setNewCategoryName('')\n  }\n\n  const getModalFooter = () => {\n    const modalFooter = [\n      <Button key={'cancel'} onClick={modalProps.onCancel}>\n        Cancel\n      </Button>,\n      <Button key={'submit'} type=\"primary\" onClick={()=>{form.submit()}}>\n        {product ? \"Save\" : \"Save\"}\n      </Button>\n    ]\n  \n    if (product) {\n      modalFooter.unshift(\n        <Button key={'delete'} type=\"danger\" onClick={onDeleteProduct}>\n          Delete\n        </Button>\n      )\n    }\n    return modalFooter;\n  }\n\n  const getPreviewModalFooter = () => {\n    let isFav = previewImage && previewImage.fav;\n    return (\n      <Button \n        type={isFav ? 'primary': 'default'} \n        icon={isFav ? (<StarFilled style={{color: 'gold'}}/>) : (<StarOutlined/>) } \n        onClick={handleFavImageChange}\n      >\n        Favourite\n      </Button>\n    )\n  } \n  return (\n    <div id=\"productForm\">\n      <Collapse \n        defaultActiveKey={['1','2']} \n        //bordered={false}\n        expandIconPosition=\"right\"\n      >\n        <Panel header=\"Product Information\" key=\"1\">\n          <Form \n            name=\"complex-form\" \n            form={form} \n            onFinish={onFinish} \n            labelCol={{ span: 5 }} \n            wrapperCol={{ span: 16 }} \n          >\n            <Form.Item name={'_id'} label=\"ID\">\n              <Input />\n            </Form.Item>\n            <Form.Item name={'name'} label=\"Name\" rules={[{ required: true }]}>\n              <Input />\n            </Form.Item>\n            <Form.Item name={'description'} label=\"Description\">\n              <Input.TextArea rows={4} />\n            </Form.Item>\n            <Form.Item name={'category'} label=\"Category\">\n              <Select\n                style={{ width: 240 }}\n                placeholder=\"Select a category\"\n                labelInValue={true}\n                allowClear={true}\n                dropdownRender={menu => (\n                  <div>\n                    {menu}\n                    <Divider style={{ margin: '4px 0' }} />\n                    <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\n                      <Input style={{ flex: 'auto' }} value={newCategoryName} onChange={onCategoryNameChange} required/>\n                      <a\n                        style={{ flex: 'none', padding: '8px', display: 'block', cursor: 'pointer' }}\n                        onClick={addNewCategory}\n                      >\n                        <PlusOutlined /> New\n                      </a>\n                    </div>\n                  </div>\n                )}\n              >\n                {productCategory.map((item, index) => (\n                  <Option key={item._id} value={item._id}>{item.name}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item name={'published'} label=\"Published\" valuePropName=\"checked\">\n              <Switch checkedChildren=\"Active\" unCheckedChildren=\"Inactive\" />\n            </Form.Item>\n\n            <Form.Item name={'images'} label=\"Images\">\n              <React.Fragment>\n                <Upload\n                  accept=\"image/*\"\n                  beforeUpload={ (file) => {\n                    console.log(\"beforeUpload\", file)\n                    return false;\n                  }}\n                  listType=\"picture-card\"\n                  multiple={true}\n                  fileList={fileList}\n                  onPreview={handlePreviewOpen}\n                  onChange={handleFileListChange}\n                  //showUploadList={{\n                  //  showDownloadIcon: true,\n                  //  downloadIcon: <StarFilled style={{color: 'yellow'}}/>\n                  //}}\n                  className={'productForm-upload'}                >\n                  {fileList.length < fileLimit ? uploadButton : null}\n                </Upload>\n                <Modal \n                  visible={previewVisible} \n                  footer={getPreviewModalFooter()} \n                  onCancel={handlePreviewClose}>\n                {/* <Modal visible={previewVisible} footer={null} onCancel={handlePreviewClose}> */}\n                  <img alt=\"example\" style={{ width: '100%' }} src={previewImage ? previewImage.url || previewImage.thumbUrl : ''} />\n                </Modal>\n              </React.Fragment>\n            </Form.Item>\n          </Form> \n\n        </Panel>\n        {\n          product ? (\n            <Panel header=\"Pricing & Variants\" key=\"2\">\n              <InventoryFormTable\n                productId={product._id}\n                inventoryData={inventoryData}\n                setInventoryData={setInventoryData}\n                productVariants={productVariants}\n                setProductVariants={setProductVariants}\n              />\n            </Panel>\n          ) : null\n        }\n        {/* {\n          product ? (\n            <Panel header=\"Related Products\" key=\"3\">\n              \n            </Panel>\n          ) : null\n        } */}\n      </Collapse>\n    </div>\n  )\n}\n\nconst ProductForm = (props) => {\n  const { product, categories = [], modalVisible, refetch, closeModal } = props;\n  const [ modalFooter, setModalFooter ] = useState([]);\n\n  let modalProps = {}\n  if (modalFooter) {\n    modalProps['footer'] = modalFooter;\n  }\n\n  return (\n    <Modal\n        title={product ? product.name : \"New Product\"}\n        width={'95%'}\n        visible={modalVisible}\n        onCancel={closeModal}\n        destroyOnClose\n        wrapClassName={'products-modalWrapper'}\n        //bodyStyle={{paddingLeft:'0'}} //for left tab\n        style={{overflow:\"hidden\"}}\n        //bodyStyle={{paddingTop:'0'}}\n        {...modalProps}\n      >\n        <ProductInfoForm\n          // product props\n          product={product} \n          categories={categories}\n          refetch={refetch}\n\n          // modal props\n          modalVisible={modalVisible}\n          onCancel={closeModal}\n          setModalFooter={setModalFooter}\n        />\n      </Modal>\n  )\n}\nexport default ProductForm;","import React, {useState} from 'react';\nimport Page_01 from './component/Page_01';\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { Button, Modal, Empty } from 'antd';\nimport {\n  PlusOutlined\n} from '@ant-design/icons';\nimport ProductForm from './component/ProductForm';\nimport ProductCard from './component/ProductCard';\nimport Loading from '../../utils/component/Loading';\n\nconst GET_PRODUCTS_QUERY = gql`\n  query products($filter: JSONObject) {\n    products(filter: $filter) {\n      _id\n      createdAt\n      updatedAt\n      name\n      description\n      category\n      variants\n      published\n      images\n    }\n  }\n`;\n\nconst Products = (props) => {\n  const [ productFormModal, setProductFormModal ] = useState(false);\n  const [ selectedProduct, setSelectedProduct ] = useState(null);\n\n  const { data, loading, error, refetch } = useQuery(GET_PRODUCTS_QUERY, {\n    fetchPolicy: \"cache-and-network\",\n    variables: {\n\n    },\n    onError: (error) => {\n      console.log(\"products error\", error)\n\n    },\n    onCompleted: (result) => {\n      \n    }\n  });\n\n  const handleProductFormModalOpen = () => {\n    setProductFormModal(true);\n  }\n  const handleProductFormModalClose = () => {\n    setProductFormModal(false);\n  }\n\n  const handleOnClickProduct = (product) => {\n    handleProductFormModalOpen();\n    setSelectedProduct(product)\n  }\n\n  const getProducts = (dataInput) => {\n    let result = [];\n    dataInput.products.map((aProduct, index)=>{\n      result.push(\n        <li key={index} className=\"products-card-item\" onClick={()=>{handleOnClickProduct(aProduct)}}>\n          <ProductCard product={aProduct}/>\n        </li>\n      )\n    })\n    return result;\n  }\n\n  return (\n    <Page_01\n      title={\"Products\"}\n      extra={[\n        <Button key=\"create\" type=\"primary\" icon={<PlusOutlined />} onClick={()=>{handleOnClickProduct(null)}} />\n      ]}\n    >\n      <ul className=\"products-container\">\n        {\n          loading ? <Loading/> \n          : (error ? \"Error\" \n            : (data.products.length > 0 ? getProducts(data) : <li style={{width:'100%'}}><Empty/></li> ))\n        }\n      </ul>\n      <ProductForm\n          // product props\n          product={selectedProduct} \n          refetch={refetch}\n\n          // modal props\n          modalVisible={productFormModal}\n          closeModal={handleProductFormModalClose}\n        />\n    </Page_01>\n  )\n}\n\nexport default Products;\n","import React, {useState, useEffect} from 'react';\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { Button, Table, Tag, message } from 'antd';\nimport {\n  PlusOutlined\n} from '@ant-design/icons';\nimport { format } from 'date-fns';\n\nimport Page_01 from './component/Page_01';\nimport Loading from '../../utils/component/Loading';\nimport ProductForm from './component/ProductForm';\n\nconst GET_PRODUCTS_QUERY = gql`\n  query products($filter: JSONObject) {\n    products(filter: $filter) {\n      _id\n      createdAt\n      updatedAt\n      name\n      description\n      category\n      variants\n      published\n      images\n    }\n  }\n`;\n\nconst READ_PRODUCT_INVENTORY_QUERY = gql`\n  query inventory($filter: JSONObject) {\n    inventory(filter: $filter) {\n      _id\n      createdAt\n      updatedAt\n      price\n      stock\n      variants\n      published\n      productId\n    }\n  }\n`;\n\nconst UPDATE_PRODUCT_PUBLISH = gql`\n  mutation updateProductPublish($ids: [String!], $published: Boolean!) {\n    updateProductPublish(ids: $ids, published: $published) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst UPDATE_INVENTORY_PUBLISH = gql`\n  mutation updateInventoryPublish($ids: [String!], $published: Boolean!) {\n    updateInventoryPublish(ids: $ids, published: $published) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst getAllProductCategory = (products) => {\n  let result = [];\n  products.map((aProduct)=>{\n    if (aProduct.category && aProduct.category.length > 0) {\n      aProduct.category.map((aCategory)=>{\n        let foundPushedItem = result.find((anItem)=>anItem._id == aCategory._id);\n        if (!foundPushedItem) {\n          result.push(aCategory);\n        }\n      })\n    }\n  });\n  return result;\n}\n\nconst Inventory = (props) => {\n  const [ productFormModal, setProductFormModal ] = useState(false);\n  const [ selectedProduct, setSelectedProduct ] = useState(null);\n\n  const [ selectedItems, setSelectedItems ] = useState([]);\n  const [ displaySelectionPanel, setDisplaySelectionPanel ] = useState(false);\n\n  const { data: productsData, loading, error, refetch: refetchProducts } = useQuery(GET_PRODUCTS_QUERY, {\n    fetchPolicy: \"cache-and-network\",\n    variables: {\n      // filter: {\n      //   sorter: {\n      //     createdAt: 1\n      //   }\n      // }\n    },\n    onError: (error) => {\n      console.log(\"products error\", error)\n\n    },\n    onCompleted: (result) => {\n      \n    }\n  });\n\n  const { data: inventoryData, loading: inventoryLoading, error: inventoryError, refetch: refetchInventory } = useQuery(READ_PRODUCT_INVENTORY_QUERY, {\n    fetchPolicy: \"cache-and-network\",\n    onError: (error) => {\n      console.log(\"inventoryData error\", error)\n    },\n    onCompleted: (result) => {\n      // console.log('inventoryData', result)\n    }\n  });\n\n  const [updateProductPublish] = useMutation(UPDATE_PRODUCT_PUBLISH,{\n    onCompleted: (result) => {\n      console.log(\"updateInventoryPublish result\",result)\n      refetchProducts();\n    }\n  });\n  const [updateInventoryPublish] = useMutation(UPDATE_INVENTORY_PUBLISH,{\n    onCompleted: (result) => {\n      console.log(\"updateInventoryPublish result\",result)\n      refetchInventory();\n    }\n  });\n\n\n  useEffect(()=>{\n    if (selectedItems.length > 0) {\n      if (!displaySelectionPanel) setDisplaySelectionPanel(true);\n    }\n    else {\n      if (displaySelectionPanel) setDisplaySelectionPanel(false)\n    }\n  },[selectedItems.length])\n\n\n  const handleProductFormModalOpen = () => {\n    setProductFormModal(true);\n  }\n  const handleProductFormModalClose = () => {\n    setProductFormModal(false);\n  }\n\n  const handleOnClickProduct = (product) => {\n    handleProductFormModalOpen();\n    setSelectedProduct(product)\n  }\n\n  const refetchData = () => {\n    refetchProducts();\n    refetchInventory();\n  }\n\n\n  let columns = [\n    {\n      title: 'No.',\n      dataIndex: 'index',\n      width: 75,\n      render: (text, record, index) => {\n        return index + 1 + '.';\n      }\n    },\n    {\n      title: \"Created At\",\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      sorter: (a, b) => new Date(a.createdAt) - new Date(b.createdAt),\n      render: (text, record) => {\n        let dateTime = format(new Date(text), \"MM/dd/yyyy hh:mm:ss aa\")\n        return dateTime;\n      }\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      render: (text, record) => {\n        let result = record.name ? (<Button type=\"link\" onClick={()=>{handleOnClickProduct(record)}}>{record.name}</Button>) : null;\n        if (!result) {\n          let newName = \"\";\n          if (record.variants) {\n            \n            let variantKeys = Object.keys(record.variants);\n            variantKeys.map((aKey, index)=>{\n              newName += `${record.variants[aKey]} ${index == variantKeys.length - 1 ? \"\" : \"/ \"}`\n            })\n          }\n          else {\n            newName = \"-\";\n          }\n          result = newName;\n        }\n        return result;\n      }\n    },\n    {\n      title: 'Price',\n      dataIndex: 'price',\n      render: (text, record) => {\n        let result = record.price;\n        if (!result) {\n          result = '-';\n        }\n        return result;\n      }\n    },\n    {\n      title: 'Stock',\n      dataIndex: 'stock',\n      sorter: (a, b) => {\n        if (a.stock && b.stock) {\n          return a.stock - b.stock\n        }\n        return 0;\n      },\n      render: (text, record) => {\n        let result = record.stock;\n        if (!result) {\n          if (record.children && record.children.length > 0) {\n            let sum = 0;\n            record.children.map((aChild)=>{sum += aChild.stock});\n            result = sum;\n          }\n          else {\n            result = '-';\n          }\n        }\n        return result;\n      }\n    },\n    {\n      title: 'Published',\n      dataIndex: 'published',\n      render: (text, record) => {\n        return (\n          record.published ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>\n        )\n      } \n    }\n  ]\n\n  \n\n  const selectionPanel = () => {\n    let inventoryIds = [];\n    let productIds = [];\n    selectedItems.map((anItem)=>{\n      if (anItem.productId && anItem.productId != \"\") {\n        inventoryIds.push(anItem._id)\n      }\n      else {\n        productIds.push(anItem._id)\n      }\n    });\n  \n    const updateToPublish = () => {\n      if (inventoryIds.length > 0) {\n        updateInventoryPublish({\n          variables: {\n            ids: inventoryIds,\n            published: true\n          }\n        })\n      }\n      if (productIds.length > 0) {\n        updateProductPublish({\n          variables: {\n            ids: productIds,\n            published: true\n          }\n        })\n      }\n    }\n    const updateToUnpublish = () => {\n      if (inventoryIds.length > 0) {\n        updateInventoryPublish({\n          variables: {\n            ids: inventoryIds,\n            published: false\n          }\n        })\n      }\n      if (productIds.length > 0) {\n        updateProductPublish({\n          variables: {\n            ids: productIds,\n            published: false\n          }\n        })\n      }\n    }\n    return (\n      <div style={{display: 'flex'}}>\n        <Button type=\"primary\" size=\"small\" onClick={updateToPublish} style={{marginRight: '5px'}} disabled={!displaySelectionPanel}>Publish</Button>\n        <Button size=\"small\" onClick={updateToUnpublish} disabled={!displaySelectionPanel}>Unpublish</Button>\n      </div>\n    )\n  }\n\n  const rowSelection = {\n    onChange: (selectedRowKeys, selectedRows) => {\n      setSelectedItems(selectedRows);\n      // console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n    },\n    onSelect: (record, selected, selectedRows) => {\n      // console.log(record, selected, selectedRows);\n    },\n    onSelectAll: (selected, selectedRows, changeRows) => {\n      // console.log(selected, selectedRows, changeRows);\n    },\n  };\n\n  const getTableData = () => {\n    let result = [];\n    if (productsData && inventoryData && !error && !inventoryError) {\n      let inventoryWithKey = inventoryData.inventory.map((anInventory)=>{ return {...anInventory, key: anInventory._id} });\n      productsData.products.map((aProduct,index)=>{\n        let productInventory = inventoryWithKey.filter((anInventory)=>anInventory.productId == aProduct._id);\n        aProduct['key'] = aProduct._id;\n        if (productInventory.length > 0) {\n          aProduct['children'] = productInventory;\n        }\n        result.push(aProduct)\n      });\n    }\n    return result;\n  }\n\n  let hasSelected = selectedItems.length > 0 ? true : false;\n\n  return (\n    <Page_01\n      title={\"Inventory\"}\n      extra={[\n        <Button key=\"create\" type=\"primary\" icon={<PlusOutlined />} onClick={()=>{handleOnClickProduct(null)}} />\n      ]}\n    >\n      <Table \n        columns={columns} \n        rowSelection={rowSelection} \n        dataSource={getTableData()} \n        pagination={false}\n        scroll={{x: columns.length * 150}}\n        size={'small'}\n      />\n      <div className={`inventory-selectionPanel ${displaySelectionPanel ? 'open' : 'close'}`}>\n        {selectionPanel()}\n      </div>\n\n      <ProductForm\n        // product props\n        product={selectedProduct} \n        categories={productsData && productsData.products ? getAllProductCategory(productsData.products) : []}\n        refetch={refetchData}\n\n        // modal props\n        modalVisible={productFormModal}\n        closeModal={handleProductFormModalClose}\n      />\n    </Page_01>\n  )\n}\n\nexport default Inventory;\n","import React, { useState, useEffect } from 'react';\nimport { Modal, Divider, Descriptions, List, Avatar } from 'antd';\nimport { format } from 'date-fns';\n\nimport { getConfig } from '../../../utils/Constants';\n\n\nconst OrderInfo = (props) => {\n  const { order, closeModal, visible, ... restProps } = props;\n  const [ config, setConfig ] = useState(null);\n  useEffect(()=>{\n    const runAsyncFunc = async () => {\n      setConfig(await getConfig())\n    }\n    runAsyncFunc()\n  },[])\n\n  const orderItems = (item) => {\n    console.log('config',config)\n    let title = item.product.name;\n    let variant = \"\";\n    let variantKeys = Object.keys(item.variant);\n    variantKeys.map((aKey, index)=>{\n      variant += `${aKey}: ${item.variant[aKey]}${index == variantKeys.length -1 ? \"\" : \", \"}`\n    })\n\n    let imageSrc = \"\";\n    if (config && item.product.image) {\n      imageSrc = config.imageSrc + item.product.image;\n    }\n    return (\n      <List.Item\n        actions={[\n          \"qty: \" + item.qty,\n          \"price: \" + item.price\n        ]}\n      >\n        <List.Item.Meta\n          avatar={\n            <Avatar shape=\"square\" src={imageSrc} />\n          }\n          title={title}\n          description={variant}\n        />\n      </List.Item>\n    )\n  }\n  return (\n    <Modal\n      title={\"Order\"}\n      width={'95%'}\n      visible={visible}\n      onCancel={closeModal}\n      footer={null}\n      //destroyOnClose\n      wrapClassName={'products-modalWrapper'}\n      style={{overflow:\"hidden\"}}\n    >\n    {\n      order ?\n      <React.Fragment>\n        <Divider orientation=\"left\">订单</Divider>\n        <Descriptions \n            size=\"small\"\n            bordered\n            column={{ xxl: 2, xl: 2, lg: 2, md: 2, sm: 1, xs: 1 }}\n        >\n            <Descriptions.Item label=\"编号\">{order._id}</Descriptions.Item>\n            <Descriptions.Item label=\"订购日期\">{format(new Date(order.createdAt), \"MM/dd/yyyy hh:mm:ss aa\")}</Descriptions.Item>\n            <Descriptions.Item label=\"付款状态\">\n                {\n                  order.paid ? \n                    <span style={{\"color\":\"green\"}}>已付款</span> : <span style={{\"color\":\"red\"}}>待付款</span>\n                }\n            </Descriptions.Item>\n            <Descriptions.Item label=\"货物状态\">{order.sentOut ? <span style={{\"color\":\"green\"}}>已出货 <small> (运单号: {order.trackingNum})</small></span>:<span style={{\"color\":\"red\"}}>未出货</span>}</Descriptions.Item>\n        </Descriptions>\n        <Divider orientation=\"left\">收件人</Divider>\n        <Descriptions \n            id=\"buyerInfoTable\"\n            size=\"small\"\n            bordered\n            column={{ xxl: 1, xl: 1, lg: 1, md: 1, sm: 1, xs: 1 }}\n        >\n            <Descriptions.Item label=\"名字\">{order.customer.name}</Descriptions.Item>\n            <Descriptions.Item label=\"电话号码\">contact</Descriptions.Item>\n            <Descriptions.Item label=\"收件地址\">address</Descriptions.Item>\n        </Descriptions>\n        <Divider orientation=\"left\">购买列表</Divider> \n        <List\n          itemLayout=\"horizontal\"\n          dataSource={order.items}\n          renderItem={orderItems}\n          //bordered\n          footer={(\n            <div className=\"orderInfo-item-summary\">\n              Total: {order.total}\n            </div>\n          )}\n        />\n      </React.Fragment>\n      : \"Not found\"\n    }\n  \n    </Modal>\n  )\n}\n\nexport default OrderInfo;","import React, {useState} from 'react';\nimport { Tabs, Table, Button, Input, Popconfirm } from 'antd';\nimport { format } from 'date-fns';\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { CheckOutlined } from '@ant-design/icons';\n\nimport Page_01 from './component/Page_01';\nimport OrderInfo from './component/OrderInfo';\nimport { getConfig } from '../../utils/Constants';\n\nconst { TabPane } = Tabs;\nconst { Search } = Input;\n\nconst GET_ORDERS_QUERY = gql`\n  query orders($filter: JSONObject) {\n    orders(filter: $filter) {\n      _id\n      createdAt\n      updatedAt\n      items\n      total\n      customer\n      paid\n      sentOut\n      trackingNum\n    }\n  }\n`;\n\nconst UPDATE_ORDER_PAYMENT_QUERY = gql`\n  mutation updateOrderPayment($_id: String!, $paid: Boolean!) {\n    updateOrderPayment(_id: $_id, paid: $paid) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst UPDATE_ORDER_DELIVERY_QUERY = gql`\n  mutation updateOrderDelivery($_id: String!, $trackingNum: String) {\n    updateOrderDelivery(_id: $_id, trackingNum: $trackingNum) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst CANCEL_ORDER_QUERY = gql`\n  mutation cancelOrder($_id: String!) {\n    cancelOrder(_id: $_id) {\n      success\n      message\n      data\n    }\n  }\n`;\nconst Orders = (props) => {\n\n  const [ orderModalDisplay, setOrderModalDisplay ] = useState(false);\n  const [ selectedOrder, setSelectedOrder ] = useState(null);\n\n  const { data, loading, error, refetch: refetchOrders } = useQuery(GET_ORDERS_QUERY, {\n    fetchPolicy: \"cache-and-network\",\n    variables: {\n      filter: {\n        sorter: {\n          createdAt: 'desc'\n        }\n      }\n    },\n    onError: (error) => {\n      console.log(\"products error\", error)\n\n    },\n    onCompleted: (result) => {\n      \n    }\n  });\n\n  const [ updateOrderPayment , updateOrderPaymentResult ] = useMutation(UPDATE_ORDER_PAYMENT_QUERY,{\n    onCompleted: (result) => {\n      console.log('updateOrderPayment result', result)\n      refetchOrders()\n    }\n  })\n\n  const [ updateOrderDelivery , updateOrderDeliveryResult ] = useMutation(UPDATE_ORDER_DELIVERY_QUERY,{\n    onCompleted: (result) => {\n      console.log('updateOrderDelivery result', result)\n      refetchOrders()\n    }\n  })\n\n  const [ cancelOrder , cancelOrderResult ] = useMutation(CANCEL_ORDER_QUERY,{\n    onCompleted: (result) => {\n      console.log('updateOrderDelivery result', result)\n      refetchOrders()\n    }\n  })\n\n  const handleOrderModalDisplayOpen = (selectedOrder) => {\n    setOrderModalDisplay(true);\n    console.log('selectedOrder',selectedOrder)\n    setSelectedOrder(selectedOrder)\n  }\n  const handleOrderModalDisplayClose = () => {\n    setOrderModalDisplay(false);\n  }\n\n  const defaultColumns = [\n    {\n      title: \"No.\",\n      dataIndex: 'index',\n      key: 'index',\n      width: 75,\n      render: (text, record, index) => {\n        return `${index + 1}.`;\n      }\n    },\n    {\n      title: \"订购日期\",\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      sorter: (a, b) => new Date(a.createdAt) - new Date(b.createdAt),\n      render: (text, record) => {\n        let dateTime = format(new Date(text), \"MM/dd/yyyy hh:mm:ss aa\")\n        return dateTime;\n      }\n    },\n    {\n      title: \"订单编号\",\n      dataIndex: '_id',\n      key: '_id',\n      render: (text, record) => {\n        return (\n          <a style={{whiteSpace:\"pre-wrap\", textDecoration:\"underline\"}} onClick={()=>{handleOrderModalDisplayOpen(record)}}>{record._id.toUpperCase()}</a>\n        )\n      }\n    },\n    {\n      title: \"收货人\",\n      dataIndex: 'customer',\n      key: 'customer',\n      sorter: (a, b) => a.name - b.name,\n      render: (text, record) => {\n        return text.name;\n      }\n    },\n    {\n      title: \"总计\",\n      dataIndex: 'total',\n      key: 'total',\n      sorter: (a, b) => a.total - b.total\n    }\n  ]\n\n  // {\n  //   title: \"货物状态\",\n  //   dataIndex: 'sentOut',\n  //   key: 'sentOut',\n  //   //width: 200,\n  //   render: (text, record) => {\n  //     return 'haha'\n  //   }\n  // },\n\n  let emptyTablePlaceholder = (\n      <div>空空如也</div>\n  )\n\n  const getColumnsByTable = () => {\n    \n    let tableCol1 = [...defaultColumns, ...[\n      {\n        title: \"付款状态\",\n        dataIndex: 'paid',\n        key: 'paid',\n        render: (text, record) => {\n          const handleUpdatePayment = () => {\n            console.log('handleUpdatePayment',record)\n            updateOrderPayment({\n              variables: {\n                _id: record._id,\n                paid: !record.paid\n              }\n            })\n          }\n          return (<Button size=\"small\" type={`${text ? \"primary\" : \"danger\"}`} onClick={handleUpdatePayment}>{text ? \"已付款\" : \"未付款\"}</Button>)\n        }\n      },\n      {\n        title: \"\",\n        dataIndex: 'action',\n        key: 'action',\n        render: (text, record) => {\n          const handleCancelOrder = () => {\n            cancelOrder({\n              variables: {\n                _id: record._id\n              }\n            })\n          }\n          return (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={handleCancelOrder}>\n              {/* <div style={{width: '100%', textAlign: 'center', cursor: 'pointer'}}>取消</div> */}\n          <Button type=\"danger\" size=\"small\">取消</Button>\n\n          {/* <Button type=\"danger\" size=\"small\" onClick={handleCancelOrder}>取消</Button> */}\n            </Popconfirm>\n          )\n        } \n      }\n    ]];\n    \n    let tableCol2 = [...defaultColumns, ...[\n      {\n        title: \"付款状态\",\n        dataIndex: 'paid',\n        key: 'paid',\n        render: (text, record) => {\n          const handleUpdatePayment = () => {\n            console.log('handleUpdatePayment',record)\n            updateOrderPayment({\n              variables: {\n                _id: record._id,\n                paid: !record.paid\n              }\n            })\n          }\n          return (<Button type={`${text ? \"primary\" : \"danger\"}`} size=\"small\" onClick={handleUpdatePayment}>{text ? \"已付款\" : \"未付款\"}</Button>)\n        }\n      },\n      {\n        title: \"Tracking No.\",\n        dataIndex: 'trackingNum',\n        key: 'trackingNum',\n        width: 200,\n        render: (text, record) => {\n          let result = null;\n          if (record.sentOut && text) {\n            result = (\n              <div>{text}</div>\n            )\n          }\n          else {\n            const handleUpdateDelivery = (value) => {\n              updateOrderDelivery({\n                variables: {\n                  _id: record._id,\n                  trackingNum: value\n                }\n              })\n            }\n            result = (\n              <Search\n                placeholder=\"Enter tracking no.\"\n                enterButton={(<CheckOutlined />)}\n                size=\"small\"\n                onSearch={handleUpdateDelivery}\n              />\n            )\n          }\n          return result;\n        } \n      }\n    ]]\n\n    let tableCol3 = [...defaultColumns, ...[\n      {\n        title: \"Last Updated\",\n        dataIndex: 'updatedAt',\n        key: 'updatedAt',\n        sorter: (a, b) => new Date(a.updatedAt) - new Date(b.updatedAt),\n        render: (text, record) => {\n          let dateTime = format(new Date(text), \"MM/dd/yyyy hh:mm:ss aa\")\n          return dateTime;\n        }\n      },\n      {\n        title: \"Tracking No.\",\n        dataIndex: 'trackingNum',\n        key: 'trackingNum',\n        render: (text, record) => {\n          return text\n        } \n      }\n    ]]\n\n    return {\n      newOrders: tableCol1,\n      paidOrders: tableCol2,\n      completedOrders: tableCol3\n    }\n  }\n\n  const getFilteredOrders = () => {\n    let allOrders = data ? data.orders : [];\n    let orderList1 = [];\n    let orderList2 = [];\n    let orderList3 = [];\n    allOrders.map((anOrder)=>{\n      if (!anOrder.paid && !anOrder.sentOut) {\n        orderList1.push(anOrder);\n      }\n      else if (anOrder.paid && !anOrder.sentOut) {\n        orderList2.push(anOrder);\n      }\n      else if (anOrder.paid && anOrder.sentOut) {\n        orderList3.push(anOrder);\n      }\n    });\n    return {\n      newOrders: orderList1,\n      paidOrders: orderList2,\n      completedOrders: orderList3\n    }\n  }\n\n  let filteredColumns = getColumnsByTable();\n  let filteredOrders = getFilteredOrders();\n\n  const colWidth = 100;\n  return (\n    <Page_01\n      title={\"Orders\"}\n      //extra={[\n      //  <Button key=\"create\" type=\"primary\" icon={<PlusOutlined />} />\n      //]}\n    >\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"New Orders\" key=\"1\">\n          <Table\n            rowKey={'_id'}\n            columns={filteredColumns.newOrders} \n            dataSource={filteredOrders.newOrders} \n            pagination={false}\n            size=\"small\"\n            scroll={{x: filteredColumns.newOrders.length * colWidth}}\n            footer={null}\n            //locale={{emptyText:emptyTablePlaceholder}}\n          />\n        </TabPane>\n        <TabPane tab=\"Paid Orders\" key=\"2\">\n          <Table\n            rowKey={'_id'}\n            columns={filteredColumns.paidOrders} \n            dataSource={filteredOrders.paidOrders} \n            pagination={false}\n            size=\"small\"\n            scroll={{x: filteredColumns.paidOrders.length * colWidth}}\n            footer={null}\n            //locale={{emptyText:emptyTablePlaceholder}}\n          />\n        </TabPane>\n        <TabPane tab=\"Completed Orders\" key=\"3\">\n          <Table\n            rowKey={'_id'}\n            columns={filteredColumns.completedOrders} \n            dataSource={filteredOrders.completedOrders} \n            pagination={false}\n            size=\"small\"\n            scroll={{x: filteredColumns.completedOrders.length * colWidth}}\n            footer={null}\n            //locale={{emptyText:emptyTablePlaceholder}}\n          />\n        </TabPane>\n      </Tabs>\n      <OrderInfo\n        order={selectedOrder}\n        visible={orderModalDisplay}\n        closeModal={handleOrderModalDisplayClose}\n      />\n    </Page_01>\n  )\n}\n\nexport default Orders;","import React from 'react';\nimport { useQuery, useLazyQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { Route, Redirect, useLocation } from 'react-router-dom';\n\nconst LOGGEDIN_USER_STATE = gql`\n  {\n    user @client {\n      success\n      message\n      data {\n        _id\n        username\n        configId\n      } \n    }\n  }\n`;\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  let routeLocation = useLocation();\n  const defaultRoute = \"/login\";\n\n  const userResult = useQuery(LOGGEDIN_USER_STATE);\n  let loggedIn = false;\n  if (userResult) {\n    const {error, loading, ...getUserResult} = userResult;\n    if (!loading && !error) {\n      loggedIn = !error && !loading && getUserResult.data && getUserResult.data.user && getUserResult.data.user.success ? true : false;\n    }\n  }\n  return (\n    // Show the component only when the user is logged in\n    // Otherwise, redirect the user to /signin page\n    <Route {...rest} render={props => (\n      loggedIn ?\n        <Component {...props} />\n        : <Redirect to={{\n                  pathname: defaultRoute,\n                  state: { from: routeLocation }\n              }} />\n    )} />\n  );\n};\n\nexport default PrivateRoute;\n\n/*\ntype of page route\nprivate route = only user who logged in can see\neg. products/inventory pages\n\npublic route (not restricted) = anyone can see\neg. main page/not sensitive info\n\npublic route (restricted) = only user who is not logged in can see\neg. login page\n\n*/","import React from 'react';\nimport { useQuery, useLazyQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { Route, Redirect } from 'react-router-dom';\n\nconst LOGGEDIN_USER_STATE = gql`\n  {\n    user @client {\n      success\n      message\n      data {\n        _id\n        username\n        configId\n      } \n    }\n  }\n`;\nconst PublicRoute = ({ component: Component, restricted, ...rest }) => {\n  const defaultRoute = \"/\";\n\n  const {data: userResult, error} = useQuery(LOGGEDIN_USER_STATE);\n  let loggedIn = false;\n  if (!error) {\n    loggedIn = !error && userResult && userResult.user && userResult.user.success ? true : false;\n  }\n  return (\n    // restricted = false meaning public route\n    // restricted = true meaning restricted route\n    <Route {...rest} render={props => (\n      loggedIn && restricted ?\n        <Redirect to={defaultRoute} />\n        : <Component {...props} />\n    )} />\n  );\n};\n\nexport default PublicRoute;","import React from 'react';\n\nconst PageNotFound = () => {\n    return (\n        <div>\n            404: Page Not Found\n        </div>\n    )\n}\n\nexport default PageNotFound;","import React from 'react';\nimport {\n  Route,\n  Switch\n} from 'react-router-dom';\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nimport logo from './logo.svg';\n\nimport './css/index.css';\n\nimport * as Component from './component/index.js';\nimport Login from './component/page/Login';\nimport Products from './component/page/Products';\nimport Inventory from './component/page/Inventory';\nimport Orders from './component/page/Orders';\nimport Page_01 from './component/page/component/Page_01';\n\nimport PrivateRoute from './utils/component/PrivateRoute';\nimport PublicRoute from './utils/component/PublicRoute';\nimport PageNotFound from './utils/component/PageNotFound';\n\n\nlet Component_Layout = Component['Layout_01'];\nlet Component_Header = Component['Header_01'];\n// let Component_Footer = Component['Header_01'];\n\nconst GET_USER_STATE = gql`\n  {\n    user @client {\n      success\n      message\n      data {\n        _id\n        username\n        configId\n      } \n    }\n  }\n`;\n\n// const GET_CONFIG_STATE = gql`\n//   {\n//     config @client {\n//       success\n//       message\n//       data {\n//         _id\n//         username\n//         configId\n//       } \n//     }\n//   }\n// `;\n\nconst App = (props) => {\n  const getUserResult = useQuery(GET_USER_STATE);\n  const loggedIn = getUserResult && getUserResult.data && getUserResult.data.user && getUserResult.data.user.success ? true : false;\n\n  const Main = () => {\n    return (\n      <div>\n        Main\n      </div>\n    )\n  }\n\n  return (\n    <Component_Layout\n      header={loggedIn ? (<Component_Header />) : null}\n      footer={loggedIn ? \"2020\" : null}\n    >\n      <Switch>\n        {/* <PrivateRoute exact path={'/products'} component={Products}/> */}\n        <PrivateRoute exact path={'/'} component={Inventory}/>\n        <PrivateRoute exact path={'/main'} component={Main}/>\n        <PrivateRoute exact path={'/orders'} component={Orders}/>\n        <PrivateRoute exact path={'/configuration'} component={Main}/>\n        <PublicRoute restricted={true} exact path={'/login'} component={Login} />\n        <Route component={PageNotFound} />\n      </Switch>\n    </Component_Layout>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-client';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { BrowserRouter } from 'react-router-dom';\nimport gql from \"graphql-tag\";\n\n// import './css/base.css';\nimport App from './App';\nimport {MIDDLETIER_URL} from './utils/Constants';\nimport ApolloClientAPI from './utils/ApolloClientAPI';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst theClientAPI = ApolloClientAPI();\nexport default theClientAPI;\nconst { client, cache, ...restClient } = theClientAPI;\n\nconst jsx = (\n  <BrowserRouter>\n      <ApolloProvider client={client}>\n          <App />\n      </ApolloProvider>\n  </BrowserRouter>\n);\n\nconst GET_LOGGEDIN_USER = gql`\n  query loggedInUser{\n    loggedInUser{\n        success\n        message\n        data\n    }\n  }\n`\nconst GET_USERCONFIG = gql`\n  query userConfig($configId: String!) {\n    userConfig(configId: $configId) {\n        success\n        message\n        data\n    }\n  }\n`\nconst run = () => {\n  let cacheData = {\n    data: {\n      user: null,\n      config: null\n    }\n  }\n  restClient.query(GET_LOGGEDIN_USER).then(({data: result})=>{\n    let userFound = null;\n    if (result && result.loggedInUser) {\n      userFound = result.loggedInUser;\n    }\n    cacheData = {\n      data: {\n        user: userFound,\n        config: null\n      }\n    }\n    \n    restClient.query(\n      GET_USERCONFIG,\n      {\n        configId: userFound.data.configId\n      }\n    ).then(({data: result2})=>{\n      if (result2.userConfig.success) {\n        cacheData = {\n          data: {\n            user: userFound,\n            config: result2.userConfig.data\n          }\n        }\n      }\n      cache.writeData(cacheData);\n      ReactDOM.render(jsx,document.getElementById('root'));\n    }).catch(err=>{\n      cache.writeData(cacheData);\n      ReactDOM.render(jsx,document.getElementById('root'));\n      console.log('GET_USERCONFIG error', err)\n    })\n\n  }).catch(err=>{\n    console.log('get logged user error', err)\n    cache.writeData(cacheData)\n    ReactDOM.render(jsx,document.getElementById('root'));\n  })\n}\n\nconst init = () => {\n  run();\n}\n\ninit();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}