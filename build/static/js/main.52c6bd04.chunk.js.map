{"version":3,"sources":["logo.svg","utils/noImageFound.png","component/layout/Layout_01.js","utils/component/confirmation.js","utils/Constants.js","component/header/Header_01.js","utils/component/Loading.js","component/page/Login.js","utils/component/notification.js","component/page/component/Page_01.js","component/page/component/InventoryFormTable.js","utils/ApolloClientAPI.js","utils/qiniuAPI.js","component/page/component/ProductForm.js","component/page/Products.js","component/page/Inventory.js","component/page/component/OrderInfo.js","component/page/Orders.js","utils/component/PrivateRoute.js","utils/component/PublicRoute.js","utils/component/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout_01","props","id","className","header","children","footer","confirmation","type","content","callback","config","title","toUpperCase","icon","ExclamationCircleOutlined","okType","onCancel","destroyAll","defaultImage_system","require","handleConfigOuput","result","newDefaultImage","defaultImage","imageSrc","GET_CONFIG_CACHE_QUERY","gql","SET_CONFIG_CACHE_QUERY","GET_USER_CACHE_QUERY","SET_USER_CACHE_QUERY","setConfigCache","data","DefaultClientAPI","client","writeQuery","query","useConfigCache","useQuery","fetchPolicy","error","loading","console","log","setUserCache","user","useUserCache","LOGOUT_MUTATION","Header_01","apolloClient","useApolloClient","routeHistory","useHistory","useMutation","onCompleted","logout","success","resetStore","then","setLoggedIn","push","useState","menuCollapsed","setMenuCollapsed","menuItem","name","route","data-header-collapsed","shape","ArrowLeftOutlined","rotate","map","aMenuItem","index","buttonProps","location","pathname","key","onClick","placement","getMenuItemDisplay","style","cursor","profile","LogoutOutlined","Loading","showLoading","LoadingOutlined","LOGIN_MUTATION","GET_USER_CONFIG_QUERY","layout","labelCol","span","wrapperCol","tailLayout","offset","Login","login","fetchConfig","variables","configId","message","description","notification","useLazyQuery","result2","userConfig","initialValues","remember","onFinish","values","onFinishFailed","errorInfo","Item","label","rules","required","Password","valuePropName","htmlType","Page_01","rest","Fragment","Search","EditableContext","React","createContext","EditableRow","useForm","form","component","Provider","value","EditableCell","editable","dataIndex","record","handleSave","isVariant","restProps","editing","setEditing","inputRef","useRef","useContext","useEffect","current","focus","toggleEdit","setFieldsValue","save","e","a","validateFields","childNode","margin","width","height","ref","onPressEnter","onBlur","paddingRight","min","step","formatter","replace","parser","InventoryFormTable","productId","inventoryData","setInventoryData","productVariants","setProductVariants","newColModal","setNewColModal","handleRemoveColumn","selectedCol","restVariant","newInventory","anInventory","handleUpdatePublished","selectedRow","checked","preventDefault","updateIndex","aData","indexOf","update","published","$set","handleDeleteRow","filter","item","row","newData","findIndex","splice","components","body","cell","columnsObj","variantColKeys","Object","keys","defaultColumns","fixed","sorter","b","price","stock","align","render","text","textAlign","checkedChildren","unCheckedChildren","onChange","block","PlusOutlined","disabled","length","onConfirm","DeleteOutlined","aColKey","ellipsis","filterIcon","EditOutlined","filterDropdown","padding","display","visible","enterButton","CheckOutlined","defaultValue","onSearch","confirm","editVariant","marginLeft","onFilter","concat","getColumns","col","onCell","Date","getTime","_id","marginRight","marginBottom","rowClassName","bordered","dataSource","columns","size","pagination","scroll","x","bodyStyle","paddingBottom","onOk","newVariantValue","getFieldValue","variantName","newVariantId","resetFields","maxLength","ApolloClientAPI","middletierURL","cache","InMemoryCache","addTypename","ApolloClient","link","HttpLink","uri","credentials","params","Promise","resolve","reject","catch","err","mutation","mutate","QINIU_UPLOAD_TOKEN_QUERY","QINIU_BATCH_DELETE_QUERY","qiniuAPI","loadToken","qiniuToken","upload","file","fileObj","originFileObj","useCdnDomain","region","qiniu","z0","putExtra","fname","mimeType","response","uploadToken","subscribe","next","res","complete","batchDelete","images","imageMogr2","options","domain","Panel","Option","READ_PRODUCT_INVENTORY_QUERY","BULK_UPDATE_INVENTORY_QUERY","CREATE_NEW_PRODUCT_QUERY","DELETE_PRODUCT_QUERY","UPDATE_PRODUCT_QUERY","getImageFilesToModify","defaultArray","newArray","newImageToUpload","currentUploadedImages","imagesToDelete","allImages","anImage","newImageName","imageNameSplited","split","fav","anUploadedImage","delete","uploaded","getBase64","reader","FileReader","readAsDataURL","onload","onerror","ProductInfoForm","product","categories","refetch","modalProps","fileList","setFileList","previewVisible","setPreviewVisible","previewImage","setPreviewImage","productCategory","setProductCategory","newCategoryName","setNewCategoryName","modalVisible","productObj","assign","category","newCategoryFormat","aCategory","variants","readInventory","array","getDefaultImageArray","setModalFooter","getModalFooter","uploadButton","handleFavImageChange","newFileList","aFile","handlePreviewOpen","url","preview","inventory","flattenedInventory","restInventory","readInventoryResult","bulkUpdateInventory","createProduct","deleteProduct","updateProduct","finalProductValue","foundSelectedCategory","find","imagesToBeModified","QiniuAPI","aNewImage","variantObj","aKey","hasOwnProperty","deletedInventory","aNewInventory","deleted","onDeleteProduct","onCategoryNameChange","target","addNewCategory","modalFooter","submit","unshift","defaultActiveKey","expandIconPosition","TextArea","rows","placeholder","labelInValue","allowClear","dropdownRender","menu","flexWrap","flex","accept","beforeUpload","listType","multiple","onPreview","slice","fileLimit","isFav","StarFilled","color","StarOutlined","getPreviewModalFooter","alt","src","thumbUrl","ProductForm","closeModal","destroyOnClose","wrapClassName","overflow","GET_PRODUCTS_QUERY","UPDATE_PRODUCT_PUBLISH","UPDATE_INVENTORY_PUBLISH","getAllProductCategory","products","aProduct","anItem","Inventory","productFormModal","setProductFormModal","selectedProduct","setSelectedProduct","selectedItems","setSelectedItems","displaySelectionPanel","setDisplaySelectionPanel","onError","productsData","refetchProducts","inventoryError","refetchInventory","updateProductPublish","updateInventoryPublish","handleOnClickProduct","createdAt","format","newName","variantKeys","sum","aChild","rowSelection","selectedRowKeys","selectedRows","onSelect","selected","onSelectAll","changeRows","extra","inventoryWithKey","productInventory","getTableData","inventoryIds","productIds","ids","selectionPanel","OrderInfo","order","orientation","column","xxl","xl","lg","md","sm","xs","paid","sentOut","trackingNum","customer","itemLayout","items","renderItem","variant","image","actions","qty","Meta","avatar","total","TabPane","GET_ORDERS_QUERY","UPDATE_ORDER_PAYMENT_QUERY","UPDATE_ORDER_DELIVERY_QUERY","CANCEL_ORDER_QUERY","Orders","orderModalDisplay","setOrderModalDisplay","selectedOrder","setSelectedOrder","refetchOrders","updateOrderPayment","updateOrderDelivery","cancelOrder","whiteSpace","textDecoration","handleOrderModalDisplayOpen","filteredColumns","newOrders","paidOrders","completedOrders","updatedAt","filteredOrders","allOrders","orders","orderList1","orderList2","orderList3","anOrder","getFilteredOrders","tab","rowKey","PrivateRoute","Component","routeLocation","useLocation","userResult","loggedIn","to","state","from","PublicRoute","restricted","configResult","PageNotFound","Component_Layout","Component_Header","GET_LOGGED_IN_USER","GET_USER_CONFIG","App","loggedInUser","configLoading","userCache","configCache","Main","exact","path","Boolean","window","hostname","match","theClientAPI","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52c6bd04.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/noImageFound.3a5a71c0.png\";","import React from 'react';\n\nconst Layout_01 = (props) => {\n\n  return (\n    <div id=\"layout_01\">\n      <div className=\"wrapper layout_01-wrapper\">\n        <div className=\"header\">\n          {props.header ? props.header : null}\n        </div>\n        <div className=\"content\">\n          {props.children ? props.children : null}\n          <div className=\"footer\">\n            {props.footer ? props.footer : null}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout_01;","\nimport React from 'react';\nimport { Modal, Button } from 'antd';\nimport {\n  ExclamationCircleOutlined\n} from '@ant-design/icons';\n\nconst confirmation = (type, content, callback = null) => {\n  // type: confirm/warning/info/error\n  const config = {\n    title: type && typeof(type) == 'string' ? type.toUpperCase() : \"...\",\n    icon: <ExclamationCircleOutlined />,\n    content: content,\n    okType: 'danger',\n    onCancel: ()=>{\n      Modal.destroyAll();\n    }\n  };\n  if (callback != null) {\n    config['onOk'] = callback;\n  }\n  Modal[type](config);\n}\n\nexport default confirmation;","import { useQuery, useLazyQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nimport DefaultClientAPI from '../index';\n\n// export const MIDDLETIER_URL = \"http://localhost:3000/graphql\";\nexport const MIDDLETIER_URL = \"http://13.124.162.243/graphql\";\n\nexport const defaultImage_system = require(\"./noImageFound.png\");\nexport const defaultImage = \"https://mananml-resources.s3-us-west-2.amazonaws.com/images/HANDROLLINGACCESSORIES/SMOKING60PAPER-RED-2304X1536.jpg\";\n\nconst handleConfigOuput = (config = null) => {\n  let result = null;\n  if (config) {\n    result = {...config}\n    let newDefaultImage = defaultImage_system;\n    if (result.defaultImage && result.defaultImage != \"\") {\n      newDefaultImage = result.imageSrc + result.defaultImage;\n    }\n    result['defaultImage'] = newDefaultImage;\n  }\n  return result;\n}\n\nconst GET_USER_CONFIG_QUERY = gql`\n  query userConfig($configId: String!) {\n    userConfig(configId: $configId) {\n        success\n        message\n        data\n    }\n  }\n`\n\nconst GET_CONFIG_CACHE_QUERY = gql`\n  query config {\n    config @client {\n      _id\n      configId\n      defaultImage\n      defaultImage_system\n      imageSrc\n      paymentQRImage\n      server\n      profile\n    }\n  }\n`\n\nconst SET_CONFIG_CACHE_QUERY = gql`\n  query config {\n    config {\n      _id\n      configId\n      defaultImage\n      defaultImage_system\n      imageSrc\n      paymentQRImage\n      server\n      profile\n    }\n  }\n`\n\nconst GET_USER_CACHE_QUERY = gql`\n  query user {\n    user @client {\n      success\n      message\n      data {\n        _id\n        username\n        configId\n      } \n    }\n  }\n`\nconst SET_USER_CACHE_QUERY = gql`\n  query user {\n    user {\n      success\n      message\n      data {\n        _id\n        username\n        configId\n      } \n    }\n  }\n`\n\nexport const setConfigCache = (data) => {\n  DefaultClientAPI.client.writeQuery({\n    query: SET_CONFIG_CACHE_QUERY,\n    data: {\n      config: handleConfigOuput(data)\n    }\n  });\n}\n\nexport const useConfigCache = () => {\n  const { data, error, loading } = useQuery(GET_CONFIG_CACHE_QUERY,{\n    fetchPolicy: 'cache-only'\n  });\n\n  let result = null;\n  if (loading) {\n    // console.log('loading');\n  }\n  if (error) {\n    console.log('useConfigCache',error);\n  }\n  if (data && data.config) {\n    result = data.config;\n  }\n  return result;\n}\n\nexport const setUserCache = (data) => {\n  DefaultClientAPI.client.writeQuery({\n    query: SET_USER_CACHE_QUERY,\n    data: {\n      user: data\n    }\n  });\n}\n\nexport const useUserCache = () => {\n  const  { data, error, loading } = useQuery(GET_USER_CACHE_QUERY,{\n    fetchPolicy: 'cache-only'\n  });\n\n  let result = null;\n  if (loading) {\n    // console.log('loading');\n  }\n  if (error) {\n    console.log('useUserCache',error);\n  }\n  if (data && data.user) {\n    result = data.user;\n  }\n  return result;\n}\n\n\n\nexport const useConfigQuery = (input) => {\n  // const [ getConfig, { data, error, loading } ] = useLazyQuery(GET_USER_CONFIG_QUERY,{\n  const { data, error, loading } = useQuery(GET_USER_CONFIG_QUERY,{\n    fetchPolicy: 'cache-and-network',\n    variables: {\n      configId: input\n    },\n    onCompleted: (result) => {\n      if (result && result.userConfig && result.userConfig.success) {\n        setConfigCache(result.userConfig.data)\n      }\n    }\n  });\n  let result = null;\n  if (loading) {\n    // console.log('loading');\n  }\n  if (error) {\n    console.log('useConfigQuery',error);\n  }\n  if (data && data.userConfig) {\n    result = handleConfigOuput(data.userConfig);\n  }\n  return result;\n}\n\n// const GET_LOGGED_IN_USER = gql`\n//   query loggedInUser{\n//     loggedInUser{\n//         success\n//         message\n//         data\n//     }\n//   }\n// `\n// export const useUserQuery = () => {\n//   const [getUser, { data, error, loading }] = useLazyQuery(GET_LOGGED_IN_USER,{\n//     //fetchPolicy: 'cache-and-network'\n//   });\n\n//   let result = null;\n//   if (loading) {\n//     console.log('loading');\n//   }\n//   if (error) {\n//     console.log(error);\n//   }\n//   if (data && data.user) {\n//     result = data.user;\n//   }\n//   return result;\n// }","import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useApolloClient } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport {\n  useHistory\n} from \"react-router-dom\";\nimport { NavHashLink as NavLink } from 'react-router-hash-link';\nimport { Menu, Divider, Button, Tooltip } from 'antd';\nimport {\n  ArrowLeftOutlined,\n  LogoutOutlined\n} from '@ant-design/icons';\nimport confirmation from '../../utils/component/confirmation';\nimport { useConfigCache } from '../../utils/Constants';\n\nconst LOGOUT_MUTATION = gql`\n    mutation logout {\n      logout {\n        success\n        message\n        data\n      }\n    }\n`;\n\nconst LOGGEDIN_USER_STATE = gql`\n  {\n    user @client {\n      success\n      message\n      data {\n        _id\n        username\n        configId\n      } \n    }\n  }\n`;\n\nconst Header_01 = (props) => {\n  const apolloClient = useApolloClient();\n  let routeHistory = useHistory();\n  // const [config , setConfig] = useState(null);\n  const config = useConfigCache();\n  const [logout] = useMutation(LOGOUT_MUTATION, {\n    onCompleted: (result) => {\n      if (result && result.logout && result.logout.success) {\n        let redirectPath = '/login';\n        // if (routeHistory.location.state && routeHistory.location.state.from) {\n        //   redirectPath = routeHistory.location.state.from.pathname\n        // }\n        \n        apolloClient.resetStore().then(()=>{\n          props.setLoggedIn(false);\n          routeHistory.push(redirectPath)\n\n        })\n        // apolloClient.clearStore()\n        // apolloClient.writeData({\n        //   data: {\n        //     user: null,\n        //     config: null\n        //   }\n        // })\n      }\n    }\n  });\n\n  const [menuCollapsed, setMenuCollapsed] = useState(false);\n  const handleMenuOpen = () => {\n    setMenuCollapsed(true)\n  }\n  const handleMenuClose = () => {\n    setMenuCollapsed(false)\n  }\n\n  const handleLogout = () => {\n    confirmation('confirm', 'Confirm Logout?', ()=>{\n      logout();\n    })\n  }\n\n  const menuItem = [\n    // {\n    //   name: 'Products',\n    //   icon: null,\n    //   route: '/products'\n    // },\n    {\n      name: 'Inventory',\n      icon: null,\n      route: '/'\n    },\n    {\n      name: 'Orders',\n      icon: null,\n      route: '/orders'\n    },\n    // {\n    //   name: 'Configuration',\n    //   icon: null,\n    //   route: '/configuration'\n    // }\n  ]\n\n  const getMenuItemDisplay = () => {\n    let result = [];\n    menuItem.map((aMenuItem,index)=>{\n      let buttonProps = {\n        shape: 'circle'\n      }\n      if (menuCollapsed) {\n        buttonProps['shape'] = 'circle';\n      }\n      else {\n        buttonProps['type'] = 'link'\n      }\n      result.push(\n        <div className={`header_01-item ${routeHistory.location.pathname == aMenuItem.route ? \"header_01-activeLink\" : \"\"}`} key={index} onClick={()=>{\n          routeHistory.push(aMenuItem.route)\n          }}>\n          {\n            menuCollapsed ? \n            <Tooltip title={aMenuItem.name} placement=\"right\">\n              <Button {...buttonProps}>{aMenuItem.name[0].toUpperCase()}</Button>\n            </Tooltip>\n            : <span className={routeHistory.location.pathname == aMenuItem.route ? \"header_01-activeLink\" : \"\"}>{aMenuItem.name}</span>\n          }\n        </div>\n      )\n    });\n    return result;\n  }\n\n  return (\n    <header id=\"header_01\" data-header-collapsed={menuCollapsed}>\n      <div className=\"header_01-header\">\n        <div className=\"header_01-item collapse-btn\">\n           <Button \n              shape=\"circle\" \n              type=\"link\"\n              shape=\"circle\"\n              icon={<ArrowLeftOutlined rotate={menuCollapsed ? 180 : 0} />} \n              onClick={menuCollapsed ? handleMenuClose : handleMenuOpen}\n            />\n          {/* <ArrowLeftOutlined rotate={menuCollapsed ? 180 : 0} onClick={menuCollapsed ? handleMenuClose : handleMenuOpen} /> */}\n        </div>\n      </div>\n\n      <div className=\"header_01-content\">\n        {getMenuItemDisplay()}\n      </div>\n      <div className=\"header_01-footer\">\n        {\n          config && !menuCollapsed ? (\n            <div className=\"header_01-item\" style={{cursor: 'default'}}>\n              { config.profile.name }\n            </div>\n          ) : null\n        }\n        <div className=\"header_01-item\" onClick={handleLogout}>\n          {\n            menuCollapsed ?\n                <Tooltip title=\"Logout\" placement=\"right\">\n                  <Button \n                    shape=\"circle\" \n                    icon={<LogoutOutlined />} \n                  />\n                </Tooltip>\n              : \n              <span>Logout</span>\n          }\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header_01;","import React, {useState} from 'react';\nimport {\n  LoadingOutlined\n} from '@ant-design/icons';\n\nconst Loading = (props) => {\n  const [showLoading, setShowLoading] = useState(true);\n\n  if (showLoading) {\n    return (\n      <div className=\"loading\">\n        <LoadingOutlined/>\n      </div>\n    )\n  }\n  return null;\n}\n\nexport default Loading;","import React from 'react';\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport { useHistory } from \"react-router-dom\";\n\nimport Loading from '../../utils/component/Loading';\nimport { setUserCache, setConfigCache } from '../../utils/Constants';\nimport * as notification from '../../utils/component/notification';\n\nconst LOGIN_MUTATION = gql`\n    mutation login($user: JSONObject) {\n      login(user: $user) {\n        success\n        message\n        data\n      }\n    }\n`;\n\nconst GET_USER_CONFIG_QUERY = gql`\n  query userConfig($configId: String!) {\n    userConfig(configId: $configId) {\n        success\n        message\n        data\n    }\n  }\n`\n\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16,\n  },\n};\n\nconst Login = (props) => {\n  let routeHistory = useHistory();\n  const [login, { data, loading}] = useMutation(LOGIN_MUTATION,{\n    onCompleted: (result)=>{\n      if (result && result.login && result.login.success) {\n        let redirectPath = '/';\n        // if (routeHistory.location.state && routeHistory.location.state.from) {\n        //   redirectPath = routeHistory.location.state.from.pathname\n        // }\n        fetchConfig({\n          variables: {\n            configId: result.login.data.configId\n          }\n        })\n        // setUserCache(result.login)\n        // routeHistory.push(redirectPath)\n      }\n      else {\n        notification.showMessage({type: 'error',message: \"Failed to login\"})\n      }\n    } \n  });\n\n  const [ fetchConfig ] = useLazyQuery(GET_USER_CONFIG_QUERY,{\n      fetchPolicy: 'cache-and-network',\n      onCompleted: (result2) => {\n        if (result2 && result2.userConfig && result2.userConfig.success) {\n          setConfigCache(result2.userConfig.data)\n          setUserCache(data.login)\n        }\n      }\n    });\n\n  const onFinish = values => {\n    login({\n      variables: { user: values }\n    });\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n  return (\n    <div id=\"page_login\">\n      <Form\n        {...layout}\n        name=\"basic\"\n        initialValues={{\n          remember: true,\n        }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n      >\n        <Form.Item\n          label=\"账号\"\n          name=\"username\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your username!',\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"密码\"\n          name=\"password\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your password!',\n            },\n          ]}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\n          <Checkbox>Remember me</Checkbox>\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            登入\n          </Button>\n        </Form.Item>\n      </Form>\n      {\n        loading ? <Loading/> : null\n      }\n    </div>\n  );\n}\n\nexport default Login;","import React from 'react';\nimport { notification, Alert } from 'antd';\n\nexport const showMessage = ({ type, message, description })=>{\n  let options = {};\n  if(type ===\"error\"){\n    options = {\n      duration: 6\n    }\n  }\n  notification[type]({\n    //message: (<Alert message={message} type={type} />),\n    message: message,\n    //description: description,\n    //className: `notification-${type}`,\n    //...options\n  });\n}","import React from 'react';\nimport { PageHeader } from 'antd';\n\nconst Page_01 = (props) => {\n  const {children, ...rest} = props;\n  return (\n    <React.Fragment>\n      <div id=\"page_01\">\n        <PageHeader\n          {...rest}\n        >\n          {props.children}\n        </PageHeader>\n      </div>\n    </React.Fragment>\n  )\n  // return (\n  //   <React.Fragment>\n  //     <div id=\"page_01\">\n  //       <PageHeader\n  //         {...rest}\n  //       >\n  //       </PageHeader>\n  //       {props.children}\n  //     </div>\n  //   </React.Fragment>\n  // )\n}\n\nexport default Page_01;","import React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Table, Input, Button, Popconfirm, Form, InputNumber, Modal, Tooltip, Switch } from 'antd';\nimport { DeleteOutlined, PlusOutlined, EditOutlined, CheckOutlined } from '@ant-design/icons';\nimport update from 'immutability-helper';\n\nconst { Search } = Input;\n\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  isVariant = false,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef();\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex],\n    });\n  };\n\n  const save = async e => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n  if (isVariant) {\n    childNode = editing ? (\n      <Form.Item\n        style={{\n          margin: 0,\n          width: '100%',\n          height: '100%'\n        }}\n        name={dataIndex}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{\n          paddingRight: 24,\n        }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n  else {\n    if (editable) {\n      childNode = editing ? (\n        <Form.Item\n          style={{\n            margin: 0,\n            width: '100%',\n            height: '100%'\n          }}\n          name={dataIndex}\n          rules={[\n            {\n              required: true,\n              message: `${title} is required.`,\n            },\n          ]}\n        >\n          {\n            dataIndex == 'price' ?\n              <InputNumber \n                ref={inputRef} \n                min={0} \n                step={1} \n                formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n                onPressEnter={save} \n                onBlur={save}\n              /> \n              : dataIndex == 'stock' ? \n                <InputNumber \n                  ref={inputRef} \n                  min={0} \n                  step={1} \n                  onPressEnter={save} \n                  onBlur={save}\n                />\n                : <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n          }\n        </Form.Item>\n      ) : (\n        <div\n          className=\"editable-cell-value-wrap\"\n          style={{\n            paddingRight: 24,\n          }}\n          onClick={toggleEdit}\n        >\n          {children}\n        </div>\n      );\n    }\n  }\n\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\nconst InventoryFormTable = (props) => {\n  const { productId, inventoryData, setInventoryData, productVariants, setProductVariants } = props;\n  \n  const [ selectedRows, setSelectedRows ] = useState([]);\n\n  const [ newColModal, setNewColModal ] = useState(false);\n  const [ form ] = Form.useForm();\n\n  const maxInventory = 20;\n  const maxVariants = 4;\n\n  const getColumns = () => {\n    let result = [];\n    let variantColKeys = Object.keys(productVariants);\n\n    let defaultColumns = [\n      {\n        title: 'Price',\n        dataIndex: 'price',\n        editable: true,\n        width: 100,\n        fixed: 'right',\n        sorter: (a, b) => {\n          return a.price - b.price\n        },\n      },\n      {\n        title: 'Stock',\n        dataIndex: 'stock',\n        editable: true,\n        width: 100,\n        fixed: 'right',\n        sorter: (a, b) => {\n          return a.stock - b.stock\n        },\n      },\n      {\n        title: 'Published',\n        dataIndex: 'published',\n        width: 100,\n        fixed: 'right',\n        align: 'center',\n        render: (text, record) => {\n          return (\n              <div style={{width: '100%', textAlign: 'center', cursor: 'pointer'}}>\n                <Switch checkedChildren=\"Active\" unCheckedChildren=\"Inactive\" checked={record.published} onChange={(checked, e)=>{handleUpdatePublished(record, checked, e)}} />\n              </div>\n          )\n          // return (\n          //   record.published ? <Tag color=\"green\">ON</Tag> : <Tag color=\"red\">OFF</Tag>\n          // )\n        } \n      },\n      // {\n      //   title: \"Add Variant\",\n      //   dataIndex: 'operation',\n      //   width: 50,\n      //   align: 'center',\n      //   fixed: 'right',\n      //   filterIcon: (<PlusOutlined />),\n      //   filterDropdown: (props) => {\n      //     const editVariant = (value) => {\n      //       props.confirm();\n      //       if (value) {\n      //         let newVariantId = 'v' + new Date().getTime();\n      //         setProductVariants({...productVariants, [newVariantId]: value});\n      //       }\n      //     }\n      //     return (\n      //       <div style={{padding: '10px', display: 'flex'}}>\n      //         {\n      //           props.visible ? \n      //             <Search\n      //               enterButton={(<CheckOutlined />)}\n      //               onSearch={editVariant}\n      //               //size=\"small\"\n      //             />\n      //           : null\n      //         }\n      //       </div>\n      //     )\n      //   }, \n      //   render: (text, record) =>\n      //     inventoryData.length >= 1 ? (\n      //       <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDeleteRow(record.key)}>\n      //         <div style={{width: '100%', textAlign: 'center', cursor: 'pointer'}}><DeleteOutlined /></div>\n      //       </Popconfirm>\n      //     ) : null,\n      // },\n      {\n        title: (\n          <Tooltip title=\"New Variant\">\n            <Button\n              onClick={()=>{setNewColModal(true)}}\n              block\n              type='link'\n              icon={(<PlusOutlined/>)}\n              disabled={variantColKeys.length < maxVariants ? false : true}\n            />\n          </Tooltip>\n        ),\n        dataIndex: 'operation',\n        width: 50,\n        align: 'center',\n        fixed: 'right',\n        render: (text, record) =>\n          inventoryData.length >= 1 ? (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDeleteRow(record.key)}>\n              <div style={{width: '100%', textAlign: 'center', cursor: 'pointer'}}><DeleteOutlined /></div>\n            </Popconfirm>\n          ) : null,\n      }\n    ];\n\n    // result.push(\n    //   {\n    //     title: 'SKU',\n    //     dataIndex: 'sku',\n    //     width: 150,\n    //     editable: true,\n    //   }\n    // );\n\n    if (variantColKeys && variantColKeys.length > 0) {\n      variantColKeys.map((aColKey)=>{\n        result.push(\n          {\n            title: productVariants[aColKey],\n            dataIndex: aColKey,\n            editable: true,\n            isVariant: true,\n            width: 150,\n            ellipsis: true,\n            sorter: (a, b) => {\n              if (a[aColKey] > b[aColKey]) {\n                  return -1;\n              }\n              if (b[aColKey] > a[aColKey]) {\n                  return 1;\n              }\n              return 0;\n              // return a[aColKey] > b[aColKey]\n            },\n            filterIcon: (<EditOutlined />),\n            filterDropdown: (props) => {\n              const editVariant = (value) => {\n                props.confirm();\n                setProductVariants({...productVariants, [aColKey]: value});\n              }\n              const removeVariant = () => {\n                props.confirm();\n                handleRemoveColumn(aColKey)\n              }\n              return (\n                <div style={{padding: '10px', display: 'flex'}}>\n                  {\n                    props.visible ? \n                    <React.Fragment>\n                      <Search\n                        enterButton={(<CheckOutlined />)}\n                        defaultValue={productVariants[aColKey]}\n                        onSearch={value => editVariant(value)}\n                        //size=\"small\"\n                      />\n                      <Popconfirm title=\"Sure to delete?\" onConfirm={removeVariant}>\n                        <Button type=\"danger\" icon={<DeleteOutlined/>} style={{marginLeft: '5px'}} />\n                      </Popconfirm>\n                    </React.Fragment>\n                    : null\n                  }\n                </div>\n              )\n            }, \n            onFilter: () => {\n              console.log(\"on filter ok\")\n            }\n          }\n        )\n      })\n    }\n    \n    return result.concat(defaultColumns);\n  }\n\n  const handleAddColumn = () => {\n    let newVariantValue = form.getFieldValue();\n    if (newVariantValue && newVariantValue.variantName) {\n      let newVariantId = 'v' + new Date().getTime();\n      setProductVariants({...productVariants, [newVariantId]: newVariantValue.variantName})\n      form.resetFields()\n    }\n    setNewColModal(false);\n  }\n\n  const handleRemoveColumn = (selectedCol) => {\n    const {[selectedCol]: removedCol, ...restVariant} = productVariants;\n    setProductVariants(restVariant)\n    \n    let newInventory = inventoryData.map((anInventory)=>{\n      delete anInventory[selectedCol];\n      return anInventory;\n    })\n    setInventoryData(newInventory)\n  }\n\n  const handleUpdatePublished = (selectedRow, checked, e) => {\n    e.preventDefault();\n    let updateIndex = inventoryData.map((aData)=>aData.key).indexOf(selectedRow.key);\n    setInventoryData(update(inventoryData, {[updateIndex]: {published: {$set: checked}}}));\n  }\n\n  const handleDeleteRow = key => {\n    setInventoryData(inventoryData.filter(item => item.key !== key))\n  };\n\n  const handleAddRow = () => {\n    let newId = new Date().getTime()\n    let defaultData = {\n      key: newId,\n      _id: null,\n      price: 0,\n      stock: 0,\n      published: false,\n      productId: productId\n    };\n    let result = defaultData;\n    if (inventoryData.length > 0) {\n      const {key, _id, published, ...rest} = inventoryData[inventoryData.length - 1];\n      result = {...result, ...rest};\n    }\n    \n    setInventoryData([...inventoryData, result]);\n  };\n\n  const handleSave = row => {\n    const newData = [...inventoryData];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, { ...item, ...row });\n    setInventoryData(newData);\n  };\n\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n  const columnsObj = getColumns().map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return {\n      ...col,\n      onCell: record => ({\n        record,\n        editable: col.editable,\n        dataIndex: col.dataIndex,\n        title: col.title,\n        isVariant: col.isVariant,\n        handleSave: handleSave,\n      }),\n    };\n  });\n\n  const onSelectChange = (selectedRowKeys,selectedRows) => {\n    setSelectedRows(selectedRowKeys);\n  };\n\n  const rowSelection = {\n    selectedRows,\n    onChange: onSelectChange,\n    fixed: true\n  };\n\n  return (\n    <div className=\"inventoryTable-main\">\n      <Button\n        onClick={handleAddRow}\n        type=\"primary\"\n        style={{\n          marginRight: 16,\n          marginBottom: 16,\n        }}\n        disabled={inventoryData.length < maxInventory ? false : true}\n        icon={<PlusOutlined/>}\n      >\n        Item\n      </Button>\n      \n      <Table\n        //rowKey={'_id'}\n        components={components}\n        rowClassName={() => 'editable-row'}\n        bordered\n        dataSource={inventoryData}\n        columns={columnsObj}\n        //rowSelection={rowSelection}\n        size={\"small\"}\n        pagination={false}\n        scroll={{ x: (columnsObj.length - 4) * 150 }}\n      />\n        {/* footer={(currentPageData)=>{\n          return (\n            <div>Selecting {selectedRows.length} of {inventoryData.length}</div>\n          )\n        }} */}\n      <Form form={form}>\n      <Modal\n        title=\"New Variant\"\n        width={300}\n        bodyStyle={{paddingBottom: 0}}\n        visible={newColModal}\n        onOk={handleAddColumn}\n        onCancel={()=>{setNewColModal(false)}}\n        //forceRender\n      >\n       \n          <Form.Item \n            name=\"variantName\"\n            rules={[\n              {\n                required: true,\n                message: `Name is required.`,\n              }\n            ]}\n          >\n            <Input maxLength={8}/>\n          </Form.Item>\n      </Modal>\n      </Form>\n    </div>\n  );\n}\n\n\nexport default InventoryFormTable;","import ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nimport { MIDDLETIER_URL } from './Constants';\n\nexport default function ApolloClientAPI(middletierURL = null) {\n  const cache = new InMemoryCache({ addTypename: false });\n  const client = new ApolloClient({\n      cache,\n      link: new HttpLink({\n          uri: middletierURL ? middletierURL : MIDDLETIER_URL,\n          credentials: \"include\"\n      })\n  });\n\n  return {\n    client: client,\n    cache: cache,\n    // query: (query, params={}, callback = null)=>{\n    //   let result = {\n    //     query: query,\n    //     variables: params\n    //   }\n    //   // if (callback != null) {\n    //   //   result['onCompleted'] = callback;\n    //   // }\n    //   return client.query(result)\n    // },\n    // mutation: (query, params={}, callback = null)=>{\n    //   let result = {\n    //     mutation: query,\n    //     variables: params\n    //   }\n    //   // if (callback != null) {\n    //   //   result['onCompleted'] = callback;\n    //   // }\n    //   return client.mutate(result)\n    // },\n    query: async (query, params={})=>{\n      return new Promise((resolve, reject) => {\n        client.query({\n          variables: params,\n          query: query\n        }).then(result=>{\n          resolve(result);\n        }).catch(err=>{\n          reject(err);\n        })\n      })\n    },\n    mutation: async (query, params={})=>{\n      return new Promise((resolve, reject) => {\n        client.mutate({\n          variables: params,\n          mutation: query\n        }).then(result=>{\n          resolve(result);\n        }).catch(err=>{\n          reject(err);\n        })\n      })\n    },\n  }\n}\n","import * as qiniu from 'qiniu-js';\nimport ApolloClientAPI from './ApolloClientAPI';\nimport gql from 'graphql-tag';\n\nconst QINIU_UPLOAD_TOKEN_STATE = gql`\n  {\n    qiniu @client {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst QINIU_UPLOAD_TOKEN_QUERY = gql`\n  {\n    qiniuToken {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst QINIU_BATCH_DELETE_QUERY = gql`\n  mutation qiniuBatchDelete($images: [String!]) {\n    qiniuBatchDelete(images: $images) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst qiniuAPI = async (loadToken = true) => {\n  const apolloClient = ApolloClientAPI();\n  let qiniuToken = \"\";\n  if (loadToken) {\n    qiniuToken = await apolloClient.query(QINIU_UPLOAD_TOKEN_QUERY).then(result=>result).catch(err=>{});\n  }\n  return {\n    upload: async (file) => {\n      let fileObj = file.originFileObj\n      var config = {\n        useCdnDomain: true,\n        region: qiniu.region.z0\n      };\n      var putExtra = {\n        fname: \"\",\n        params: {},\n        mimeType: [\"image/png\", \"image/jpeg\", \"image/gif\"]\n      };\n      let key = file.name;\n      return new Promise((resolve, reject) => {\n        if (qiniuToken) {\n          let response = qiniuToken.data.qiniuToken;\n          if (response.success) {\n            let uploadToken = response.data;\n            let observable = qiniu.upload(fileObj, key, uploadToken, putExtra, config)\n\n            observable.subscribe({\n              next(res){\n                console.log('next(res)',res)\n              },\n              error(err){\n                console.log('error(err)',err)\n                reject(err)\n              }, \n              complete(res){\n                console.log('complete(res)',res)\n                resolve(res)\n              }\n            })\n          }\n        }\n        else {\n          reject(\"Error getting token\")\n        }\n        // apolloClient.query(QINIU_UPLOAD_TOKEN_STATE).then(result=>{\n        //   console.log('result',result)\n        //   let response = result.data.qiniu;\n        //   if (response.success) {\n        //     let uploadToken = response.data;\n        //     let observable = qiniu.upload(fileObj, key, uploadToken, putExtra, config)\n          \n        //     observable.subscribe({\n        //       next(res){\n        //         //console.log('next(res)',res)\n        //       },\n        //       error(err){\n        //         console.log('error(err)',err)\n        //         reject(err)\n        //       }, \n        //       complete(res){\n        //         console.log('complete(res)',res)\n        //         resolve(res)\n        //       }\n        //     })\n        //   }\n        // }).catch(err=>{\n        //   console.log('cached qiniu token not found',err)\n          \n        //   apolloClient.query(QINIU_UPLOAD_TOKEN_QUERY).then(result2=>{\n        //     console.log('result2',result2)\n        //     // apolloClient.client.writeQuery({ UPDATE_QINIU_UPLOAD_TOKEN_QUERY, data });\n        //     apolloClient.cache.writeData({data: {qiniu:result2.data.qiniuToken}})\n        //     let response2 = result2.data.qiniuToken;\n        //     if (response2.success) {\n        //       let uploadToken = response2.data;\n        //       let observable = qiniu.upload(fileObj, key, uploadToken, putExtra, config)\n  \n        //       observable.subscribe({\n        //         next(res){\n        //           console.log('next(res)',res)\n        //         },\n        //         error(err){\n        //           console.log('error(err)',err)\n        //           reject(err)\n        //         }, \n        //         complete(res){\n        //           console.log('complete(res)',res)\n        //           resolve(res)\n        //         }\n        //       })\n        //     }\n        //   }).catch(err2=>{\n        //     console.log('err2',err2)\n        //     reject(err2)\n        //   })\n        // })\n\n      })\n\n    },\n    batchDelete: async (images) => {\n      return new Promise((resolve, reject) => {\n        apolloClient.mutation(QINIU_BATCH_DELETE_QUERY,{\n          images: images\n        })\n        .then(result=>resolve(result))\n        .catch(err=>{\n          console.log(err);\n          reject(err)\n        });\n      })\n    },\n\n    imageMogr2: (options, key, domain) => {\n      return qiniu.imageMogr2(options, key, domain);\n    }\n  }\n}\n\nexport default qiniuAPI;","import React, {useState, useEffect} from 'react';\nimport { Button, Form, Input, Upload, Modal, Switch, Collapse, Select, Divider } from 'antd';\nimport { useLazyQuery, useMutation, useApolloClient } from \"@apollo/react-hooks\";\nimport { PlusOutlined, StarOutlined, StarFilled } from '@ant-design/icons';\nimport gql from \"graphql-tag\";\n\nimport confirmation from '../../../utils/component/confirmation';\nimport InventoryFormTable from './InventoryFormTable';\n\nimport qiniuAPI from '../../../utils/qiniuAPI';\nimport { useConfigCache } from '../../../utils/Constants';\n// import ApolloClientAPI from '../../../utils/ApolloClientAPI';\n\nconst { Panel } = Collapse;\nconst { Option } = Select;\n\nconst READ_PRODUCT_INVENTORY_QUERY = gql`\n  query inventory($filter: JSONObject) {\n    inventory(filter: $filter) {\n      _id\n      createdAt\n      updatedAt\n      price\n      stock\n      variants\n      published\n      productId\n    }\n  }\n`;\n\nconst BULK_UPDATE_INVENTORY_QUERY = gql`\n  mutation bulkUpdateInventory($inventory: [JSONObject!]) {\n    bulkUpdateInventory(inventory: $inventory) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst CREATE_NEW_PRODUCT_QUERY = gql`\n  mutation createProduct($product: JSONObject!) {\n    createProduct(product: $product) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst DELETE_PRODUCT_QUERY = gql`\n  mutation deleteProduct($_id: String!) {\n    deleteProduct(_id: $_id) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst UPDATE_PRODUCT_QUERY = gql`\n  mutation updateProduct($product: JSONObject!) {\n    updateProduct(product: $product) {\n      success\n      message\n      data\n    }\n  }\n`;\n\n// convert db image obj to match Upload Component format\nconst getDefaultImageArray = (array, config) => {\n  let imageSrc = config.imageSrc;\n  return array.map((anImage)=>{\n    anImage['uid'] = anImage.name;\n    anImage['url'] = imageSrc + anImage.name;\n    anImage['thumbUrl'] = imageSrc + anImage.name;\n    if (anImage.fav) {\n      //anImage['status'] = 'done';\n    }\n    return anImage;\n  })\n}\n\n// mainly for image upload/delete in qiniu\nconst getImageFilesToModify = (defaultArray = [], newArray = []) => {\n  let newImageToUpload = [];\n  let currentUploadedImages = [];\n  let imagesToDelete = []\n  let allImages = []\n\n  newArray.map((anImage,index)=>{\n    // new image to be uploaded\n    let newImageName = anImage.name;\n    if (anImage.originFileObj) {\n      let imageNameSplited = newImageName.split('.');\n      newImageName = `saas_${index}_${new Date().getTime()}_${imageNameSplited[imageNameSplited.length - 2]}.${imageNameSplited[imageNameSplited.length - 1]}`;\n      anImage['name'] = newImageName;\n      newImageToUpload.push(anImage)\n    }\n    // uploaded images\n    else {\n      currentUploadedImages.push(anImage)\n    }\n    // convert Upload Component image obj to match db format\n    allImages.push({\n      name: newImageName,\n      fav: anImage.fav ? anImage.fav : false\n    })\n  });\n\n  defaultArray.map((anImage)=>{\n    let foundIndex = currentUploadedImages.map((anUploadedImage)=>anUploadedImage.name).indexOf(anImage.name);\n    if (foundIndex < 0) {\n      imagesToDelete.push(anImage);\n    }\n  })\n\n  return {\n    upload: newImageToUpload,\n    delete: imagesToDelete,\n    allImages: allImages,\n    uploaded: defaultArray\n  };\n}\n\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}\n\nconst ProductInfoForm = (props) => {\n  const {product = null, categories, refetch, ...modalProps} = props;\n  const config = useConfigCache();\n  const fileLimit = 4;\n\n  const [ form ] = Form.useForm();\n  const [ fileList, setFileList ] = useState([]);\n  const [ previewVisible, setPreviewVisible ] = useState(false);\n  const [ previewImage, setPreviewImage ] = useState(null);\n\n  // inventory\n  const [ inventoryData, setInventoryData ] = useState([]);\n  const [ productCategory, setProductCategory ] = useState(categories);\n  const [ newCategoryName, setNewCategoryName ] = useState('');\n  const [ productVariants, setProductVariants ] = useState({'sku': 'SKU'});\n\n  useEffect(() => {\n    if (product && modalProps.modalVisible) {\n      let productObj = Object.assign({},product);\n      if (product.category && product.category.length > 0) {\n        let newCategoryFormat = product.category.map((aCategory)=>{\n          return {\n            key: aCategory._id,\n            label: aCategory.name\n          }\n        })\n        productObj['category'] = newCategoryFormat;\n      }\n      form.setFieldsValue(productObj);\n      if (product.variants) {\n        setProductVariants(product.variants)\n      }\n\n      readInventory({\n        variables: {\n          filter: {\n            filter: { productId: product._id }\n          }\n        }\n      });\n      if (product.images && product.images.length > 0) {\n        setFileList(getDefaultImageArray(product.images, config));\n      }\n    }\n    else {\n      form.resetFields();\n    }\n    modalProps.setModalFooter(getModalFooter());\n    \n  }, [product, modalProps.modalVisible]);\n\n  const uploadButton = (\n    <div>\n      <PlusOutlined />\n      <div className=\"ant-upload-text\">Upload</div>\n    </div>\n  );\n\n  const handleFileListChange = ({ fileList, ...rest }) => {\n    let result = fileList.map((aFile)=>{\n      if (aFile.fav) {\n        //aFile['status'] = 'done';\n      }\n      return aFile;\n    });\n    if (fileList.length > fileLimit) {\n      result = fileList.slice(0, fileLimit-1);\n    }\n    if (result.length > 0) {\n      let foundFavImage = result.find((anImage)=>anImage.fav);\n      if (!foundFavImage) {\n        result[0]['fav'] = true;\n      }\n    }\n    setFileList(result)\n  };\n\n  const handleFavImageChange = () => {\n    let newFileList = [].concat(fileList)\n    newFileList.map((aFile)=>{\n      if (aFile.name == previewImage.name) {\n        aFile['fav'] = true;\n      }\n      else {\n        aFile['fav'] = false;\n      }\n      return aFile;\n    });\n    setFileList(newFileList);\n  }\n\n  const handlePreviewOpen = async (file) => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n    setPreviewVisible(true);\n    setPreviewImage(file);\n  };\n\n  const handlePreviewClose = () => {\n    setPreviewVisible(false);\n  }\n\n  const [readInventory, readInventoryResult ] = useLazyQuery(READ_PRODUCT_INVENTORY_QUERY,{\n    fetchPolicy: \"cache-and-network\",\n    onCompleted: (result) => {\n      if (result && result.inventory) {\n        let flattenedInventory = [];\n        result.inventory.map((anInventory,index)=>{\n          const { variants, ...restInventory } = anInventory;\n          let newInventory = {...restInventory, ...variants, key: restInventory._id};\n          flattenedInventory.push(newInventory);\n        })\n        setInventoryData(flattenedInventory);\n      }\n\n    }\n  })\n\n  const [bulkUpdateInventory] = useMutation(BULK_UPDATE_INVENTORY_QUERY,{\n    onCompleted: (result) => {\n      // console.log(\"bulkUpdateInventory result\",result)\n    }\n  })\n\n  const [createProduct, createProductResult ] = useMutation(CREATE_NEW_PRODUCT_QUERY,{\n    onCompleted: (result) => {\n      // console.log(\"createProduct result\",result)\n      modalProps.onCancel();\n      refetch();\n    }\n  })\n  const [deleteProduct] = useMutation(DELETE_PRODUCT_QUERY,{\n    onCompleted: (result) => {\n      // console.log(\"deleteProduct result\",result)\n      modalProps.onCancel();\n      refetch();\n    }\n  })\n  const [updateProduct, updateProductResult ] = useMutation(UPDATE_PRODUCT_QUERY,{\n    onCompleted: (result) => {\n      // console.log(\"updateProduct result\",result)\n      modalProps.onCancel();\n      refetch();\n    }\n  })\n\n  const onFinish = async (values) => {\n    \n    let finalProductValue = {\n      ...values,\n      images: [], \n      variants: productVariants\n    }\n\n    if (!values._id) {\n      delete finalProductValue._id;\n    }\n    \n    if (values.category) {\n      let foundSelectedCategory = productCategory.find(aCategory=>aCategory._id == values.category.key);\n      if (foundSelectedCategory) {\n        finalProductValue['category'] = [foundSelectedCategory];\n      }\n    }\n    else {\n      finalProductValue['category'] = [];\n    }\n\n    let imagesToBeModified = getImageFilesToModify(product && product.images ? product.images : [], fileList);\n    // if (imagesToBeModified.upload.length > 0 || imagesToBeModified.delete.length > 0) {\n      finalProductValue['images'] = imagesToBeModified.allImages;\n    // }\n\n    const QiniuAPI = await qiniuAPI();\n\n    if (imagesToBeModified.upload.length > 0) {\n      imagesToBeModified.upload.map(async (aNewImage)=>{\n        await QiniuAPI.upload(aNewImage)\n      })\n    }\n    if (imagesToBeModified.delete.length > 0) {\n      await QiniuAPI.batchDelete(imagesToBeModified.delete.map(anImage=>anImage.name))\n    }\n\n    if (!product) {\n      createProduct({\n        variables: {\n          product: finalProductValue\n        }\n      })\n    }\n    else {\n\n      updateProduct({\n        variables: {\n          product: {...finalProductValue, _id: product._id}\n        }\n      })\n\n      let newInventory = [...inventoryData];\n      newInventory = newInventory.map((anInventory)=>{\n        const { key, ...restInventory} = anInventory;\n\n        //delete anInventory.key;\n        let variantObj = {}\n        Object.keys(productVariants).map((aKey)=>{\n          if (restInventory.hasOwnProperty(aKey)) {\n            variantObj[aKey] = restInventory[aKey];\n            delete restInventory[aKey];\n          }\n        });\n        restInventory['variants'] = variantObj;\n        return restInventory;\n      });\n      let deletedInventory = []\n      if (readInventoryResult.data && readInventoryResult.data.inventory) {\n        readInventoryResult.data.inventory.map((anInventory)=>{\n          let foundInventory = newInventory.map((aNewInventory)=>{return aNewInventory._id}).indexOf(anInventory._id);\n          if (foundInventory < 0) {\n            deletedInventory.push({...anInventory, deleted: true});\n          }\n        })\n      } \n\n      bulkUpdateInventory(\n        {\n          variables: {\n            inventory: newInventory.concat(deletedInventory)\n          }\n        }\n      )\n\n    }\n  }\n\n  const onDeleteProduct = () => {\n    confirmation('confirm',\"Confirm delete?\",async ()=>{\n      if (product.images && product.images.length > 0) {\n        const QiniuAPI = await qiniuAPI();\n        await QiniuAPI.batchDelete(product.images.map(anImage=>anImage.name))\n      }\n      deleteProduct({variables:{_id: product._id}})\n    })\n  }\n\n  // const checkFormTouched = () => {\n  //   console.log('isFieldsTouched',form.isFieldTouched('name'));\n  // }\n\n  const onCategoryNameChange = (e) => {\n    setNewCategoryName(e.target.value);\n  }\n\n  const addNewCategory = () => {\n    if (newCategoryName && newCategoryName != \"\") {\n      setProductCategory([...productCategory, {\n        _id: `category_${newCategoryName}_${new Date().getTime()}`,\n        name: newCategoryName\n      }]);\n      setNewCategoryName('')\n    }\n  }\n\n  const getModalFooter = () => {\n    const modalFooter = [\n      <Button key={'cancel'} onClick={modalProps.onCancel}>\n        Cancel\n      </Button>,\n      <Button key={'submit'} type=\"primary\" onClick={()=>{form.submit()}}>\n        {product ? \"Save\" : \"Save\"}\n      </Button>\n    ]\n  \n    if (product) {\n      modalFooter.unshift(\n        <Button key={'delete'} type=\"danger\" onClick={onDeleteProduct}>\n          Delete\n        </Button>\n      )\n    }\n    return modalFooter;\n  }\n\n  const getPreviewModalFooter = () => {\n    let isFav = previewImage && previewImage.fav;\n    return (\n      <Button \n        type={isFav ? 'primary': 'default'} \n        icon={isFav ? (<StarFilled style={{color: 'gold'}}/>) : (<StarOutlined/>) } \n        onClick={handleFavImageChange}\n      >\n        Favourite\n      </Button>\n    )\n  } \n\n  // const editImageOutput = (image) => {\n  //   if (image) {\n  //     const QiniuAPI = qiniuAPI();\n  //     let imageSrc = config.imageSrc;\n  //     var imgLink = QiniuAPI.imageMogr2({\n  //       \"auto-orient\": true,      // 布尔值，是否根据原图EXIF信息自动旋正，便于后续处理，建议放在首位。\n  //       strip: true,              // 布尔值，是否去除图片中的元信息\n  //       thumbnail: '1000x1000',    // 缩放操作参数\n  //       crop: '!300x400a10a10',    // 裁剪锚点参数\n  //       quality: 40,              // 图片质量，取值范围1-100\n  //       rotate: 20,               // 旋转角度，取值范围1-360，缺省为不旋转。\n  //       blur: '3x5'               // 高斯模糊参数\n  //     }, image.name, domain)\n  //   }\n  // }\n  return (\n    <div id=\"productForm\">\n      <Collapse \n        defaultActiveKey={['1','2']} \n        //bordered={false}\n        expandIconPosition=\"right\"\n      >\n        <Panel header=\"Product Information\" key=\"1\">\n          <Form \n            name=\"complex-form\" \n            form={form} \n            onFinish={onFinish} \n            labelCol={{ span: 5 }} \n            wrapperCol={{ span: 16 }} \n          >\n            {\n              !product ? (\n                <Form.Item name={'_id'} label=\"ID\">\n                  <Input />\n                </Form.Item> \n              ) : null\n            }\n            <Form.Item name={'name'} label=\"Name\" rules={[{ required: true }]}>\n              <Input />\n            </Form.Item>\n            <Form.Item name={'description'} label=\"Description\">\n              <Input.TextArea rows={4} />\n            </Form.Item>\n            <Form.Item name={'category'} label=\"Category\">\n              <Select\n                style={{ width: 240 }}\n                placeholder=\"Select a category\"\n                labelInValue={true}\n                allowClear={true}\n                dropdownRender={menu => (\n                  <div>\n                    {menu}\n                    <Divider style={{ margin: '4px 0' }} />\n                    <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>\n                      <Input style={{ flex: 'auto' }} value={newCategoryName} onChange={onCategoryNameChange} required={true}/>\n                      <Button\n                        type=\"link\"\n                        icon={<PlusOutlined />}\n                        onClick={addNewCategory}\n                        disabled={newCategoryName != \"\" ? false : true}\n                      >\n                        New\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              >\n                {productCategory.map((item, index) => (\n                  <Option key={index} value={item._id}>{item.name}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item name={'published'} label=\"Published\" valuePropName=\"checked\">\n              <Switch checkedChildren=\"Active\" unCheckedChildren=\"Inactive\" />\n            </Form.Item>\n\n            <Form.Item name={'images'} label=\"Images\">\n              <React.Fragment>\n                <Upload\n                  accept=\"image/*\"\n                  beforeUpload={ (file) => {\n                    return false;\n                  }}\n                  listType=\"picture-card\"\n                  multiple={true}\n                  fileList={fileList}\n                  onPreview={handlePreviewOpen}\n                  onChange={handleFileListChange}\n                  //showUploadList={{\n                  //  showDownloadIcon: true,\n                  //  downloadIcon: <StarFilled style={{color: 'yellow'}}/>\n                  //}}\n                  className={'productForm-upload'}                >\n                  {fileList.length < fileLimit ? uploadButton : null}\n                </Upload>\n                <Modal \n                  visible={previewVisible} \n                  footer={getPreviewModalFooter()} \n                  onCancel={handlePreviewClose}>\n                {/* <Modal visible={previewVisible} footer={null} onCancel={handlePreviewClose}> */}\n                  <img alt={`preview: ${previewImage ? previewImage.name : \"\"}`} style={{ width: '100%' }} src={previewImage ? previewImage.url || previewImage.thumbUrl : ''} />\n                  {/* <img alt=\"example\" style={{ width: '100%' }} src={()=>{editImageOutput(previewImage)}} /> */}\n                </Modal>\n              </React.Fragment>\n            </Form.Item>\n          </Form> \n\n        </Panel>\n        {\n          product ? (\n            <Panel header=\"Pricing & Variants\" key=\"2\">\n              <InventoryFormTable\n                productId={product._id}\n                inventoryData={inventoryData}\n                setInventoryData={setInventoryData}\n                productVariants={productVariants}\n                setProductVariants={setProductVariants}\n              />\n            </Panel>\n          ) : null\n        }\n        {/* {\n          product ? (\n            <Panel header=\"Related Products\" key=\"3\">\n              \n            </Panel>\n          ) : null\n        } */}\n      </Collapse>\n    </div>\n  )\n}\n\nconst ProductForm = (props) => {\n  const { product, categories = [], modalVisible, refetch, closeModal } = props;\n  const [ modalFooter, setModalFooter ] = useState([]);\n\n  let modalProps = {}\n  if (modalFooter) {\n    modalProps['footer'] = modalFooter;\n  }\n\n  return (\n    <Modal\n      title={product ? product.name : \"New Product\"}\n      width={'95%'}\n      visible={modalVisible}\n      onCancel={closeModal}\n      destroyOnClose\n      wrapClassName={'products-modalWrapper'}\n      //bodyStyle={{paddingLeft:'0'}} //for left tab\n      style={{overflow:\"hidden\"}}\n      //bodyStyle={{paddingTop:'0'}}\n      {...modalProps}\n    >\n      <ProductInfoForm\n        // product props\n        product={product} \n        categories={categories}\n        refetch={refetch}\n\n        // modal props\n        modalVisible={modalVisible}\n        onCancel={closeModal}\n        setModalFooter={setModalFooter}\n      />\n    </Modal>\n  )\n}\nexport default ProductForm;","import React, {useState} from 'react';\nimport Page_01 from './component/Page_01';\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { Button, Modal, Empty } from 'antd';\nimport {\n  PlusOutlined\n} from '@ant-design/icons';\nimport ProductForm from './component/ProductForm';\nimport ProductCard from './component/ProductCard';\nimport Loading from '../../utils/component/Loading';\n\nconst GET_PRODUCTS_QUERY = gql`\n  query products($filter: JSONObject) {\n    products(filter: $filter) {\n      _id\n      createdAt\n      updatedAt\n      name\n      description\n      category\n      variants\n      published\n      images\n    }\n  }\n`;\n\nconst Products = (props) => {\n  const [ productFormModal, setProductFormModal ] = useState(false);\n  const [ selectedProduct, setSelectedProduct ] = useState(null);\n\n  const { data, loading, error, refetch } = useQuery(GET_PRODUCTS_QUERY, {\n    fetchPolicy: \"cache-and-network\",\n    variables: {\n\n    },\n    onError: (error) => {\n      console.log(\"products error\", error)\n\n    },\n    onCompleted: (result) => {\n      \n    }\n  });\n\n  const handleProductFormModalOpen = () => {\n    setProductFormModal(true);\n  }\n  const handleProductFormModalClose = () => {\n    setProductFormModal(false);\n  }\n\n  const handleOnClickProduct = (product) => {\n    handleProductFormModalOpen();\n    setSelectedProduct(product)\n  }\n\n  const getProducts = (dataInput) => {\n    let result = [];\n    dataInput.products.map((aProduct, index)=>{\n      result.push(\n        <li key={index} className=\"products-card-item\" onClick={()=>{handleOnClickProduct(aProduct)}}>\n          <ProductCard product={aProduct}/>\n        </li>\n      )\n    })\n    return result;\n  }\n\n  return (\n    <Page_01\n      title={\"Products\"}\n      extra={[\n        <Button key=\"create\" type=\"primary\" icon={<PlusOutlined />} onClick={()=>{handleOnClickProduct(null)}} />\n      ]}\n    >\n      <ul className=\"products-container\">\n        {\n          loading ? <Loading/> \n          : (error ? \"Error\" \n            : (data.products.length > 0 ? getProducts(data) : <li style={{width:'100%'}}><Empty/></li> ))\n        }\n      </ul>\n      <ProductForm\n          // product props\n          product={selectedProduct} \n          refetch={refetch}\n\n          // modal props\n          modalVisible={productFormModal}\n          closeModal={handleProductFormModalClose}\n        />\n    </Page_01>\n  )\n}\n\nexport default Products;\n","import React, {useState, useEffect} from 'react';\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { Button, Table, Tag, message } from 'antd';\nimport {\n  PlusOutlined\n} from '@ant-design/icons';\nimport { format } from 'date-fns';\n\nimport Page_01 from './component/Page_01';\nimport Loading from '../../utils/component/Loading';\nimport ProductForm from './component/ProductForm';\n\nconst GET_PRODUCTS_QUERY = gql`\n  query products($filter: JSONObject) {\n    products(filter: $filter) {\n      _id\n      createdAt\n      updatedAt\n      name\n      description\n      category\n      variants\n      published\n      images\n    }\n  }\n`;\n\nconst READ_PRODUCT_INVENTORY_QUERY = gql`\n  query inventory($filter: JSONObject) {\n    inventory(filter: $filter) {\n      _id\n      createdAt\n      updatedAt\n      price\n      stock\n      variants\n      published\n      productId\n    }\n  }\n`;\n\nconst UPDATE_PRODUCT_PUBLISH = gql`\n  mutation updateProductPublish($ids: [String!], $published: Boolean!) {\n    updateProductPublish(ids: $ids, published: $published) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst UPDATE_INVENTORY_PUBLISH = gql`\n  mutation updateInventoryPublish($ids: [String!], $published: Boolean!) {\n    updateInventoryPublish(ids: $ids, published: $published) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst getAllProductCategory = (products) => {\n  let result = [];\n  products.map((aProduct)=>{\n    if (aProduct.category && aProduct.category.length > 0) {\n      aProduct.category.map((aCategory)=>{\n        let foundPushedItem = result.find((anItem)=>anItem._id == aCategory._id);\n        if (!foundPushedItem) {\n          result.push(aCategory);\n        }\n      })\n    }\n  });\n  return result;\n}\n\nconst Inventory = (props) => {\n  const [ productFormModal, setProductFormModal ] = useState(false);\n  const [ selectedProduct, setSelectedProduct ] = useState(null);\n\n  const [ selectedItems, setSelectedItems ] = useState([]);\n  const [ displaySelectionPanel, setDisplaySelectionPanel ] = useState(false);\n\n  const { data: productsData, loading, error, refetch: refetchProducts } = useQuery(GET_PRODUCTS_QUERY, {\n    fetchPolicy: \"cache-and-network\",\n    variables: {\n      // filter: {\n      //   sorter: {\n      //     createdAt: 1\n      //   }\n      // }\n    },\n    onError: (error) => {\n      console.log(\"products error\", error)\n\n    },\n    onCompleted: (result) => {\n      \n    }\n  });\n\n  const { data: inventoryData, loading: inventoryLoading, error: inventoryError, refetch: refetchInventory } = useQuery(READ_PRODUCT_INVENTORY_QUERY, {\n    fetchPolicy: \"cache-and-network\",\n    onError: (error) => {\n      console.log(\"inventoryData error\", error)\n    },\n    onCompleted: (result) => {\n      // console.log('inventoryData', result)\n    }\n  });\n\n  const [updateProductPublish] = useMutation(UPDATE_PRODUCT_PUBLISH,{\n    onCompleted: (result) => {\n      refetchProducts();\n    }\n  });\n  const [updateInventoryPublish] = useMutation(UPDATE_INVENTORY_PUBLISH,{\n    onCompleted: (result) => {\n      refetchInventory();\n    }\n  });\n\n\n  useEffect(()=>{\n    if (selectedItems.length > 0) {\n      if (!displaySelectionPanel) setDisplaySelectionPanel(true);\n    }\n    else {\n      if (displaySelectionPanel) setDisplaySelectionPanel(false)\n    }\n  },[selectedItems.length])\n\n\n  const handleProductFormModalOpen = () => {\n    setProductFormModal(true);\n  }\n  const handleProductFormModalClose = () => {\n    setProductFormModal(false);\n  }\n\n  const handleOnClickProduct = (product) => {\n    handleProductFormModalOpen();\n    setSelectedProduct(product)\n  }\n\n  const refetchData = () => {\n    refetchProducts();\n    refetchInventory();\n  }\n\n\n  let columns = [\n    {\n      title: 'No.',\n      dataIndex: 'index',\n      width: 75,\n      render: (text, record, index) => {\n        return index + 1 + '.';\n      }\n    },\n    {\n      title: \"Created At\",\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      sorter: (a, b) => new Date(a.createdAt) - new Date(b.createdAt),\n      render: (text, record) => {\n        let dateTime = format(new Date(text), \"MM/dd/yyyy hh:mm:ss aa\")\n        return dateTime;\n      }\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      render: (text, record) => {\n        let result = record.name ? (<Button type=\"link\" onClick={()=>{handleOnClickProduct(record)}}>{record.name}</Button>) : null;\n        if (!result) {\n          let newName = \"\";\n          if (record.variants) {\n            \n            let variantKeys = Object.keys(record.variants);\n            variantKeys.map((aKey, index)=>{\n              newName += `${record.variants[aKey]} ${index == variantKeys.length - 1 ? \"\" : \"/ \"}`\n            })\n          }\n          else {\n            newName = \"-\";\n          }\n          result = newName;\n        }\n        return result;\n      }\n    },\n    {\n      title: 'Price',\n      dataIndex: 'price',\n      render: (text, record) => {\n        let result = record.price;\n        if (!result) {\n          result = '-';\n        }\n        return result;\n      }\n    },\n    {\n      title: 'Stock',\n      dataIndex: 'stock',\n      sorter: (a, b) => {\n        if (a.stock && b.stock) {\n          return a.stock - b.stock\n        }\n        return 0;\n      },\n      render: (text, record) => {\n        let result = record.stock;\n        if (!result) {\n          if (record.children && record.children.length > 0) {\n            let sum = 0;\n            record.children.map((aChild)=>{sum += aChild.stock});\n            result = sum;\n          }\n          else {\n            result = '-';\n          }\n        }\n        return result;\n      }\n    },\n    {\n      title: 'Published',\n      dataIndex: 'published',\n      render: (text, record) => {\n        return (\n          record.published ? <Tag color=\"green\">Active</Tag> : <Tag color=\"red\">Inactive</Tag>\n        )\n      } \n    }\n  ]\n\n  \n\n  const selectionPanel = () => {\n    let inventoryIds = [];\n    let productIds = [];\n    selectedItems.map((anItem)=>{\n      if (anItem.productId && anItem.productId != \"\") {\n        inventoryIds.push(anItem._id)\n      }\n      else {\n        productIds.push(anItem._id)\n      }\n    });\n  \n    const updateToPublish = () => {\n      if (inventoryIds.length > 0) {\n        updateInventoryPublish({\n          variables: {\n            ids: inventoryIds,\n            published: true\n          }\n        })\n      }\n      if (productIds.length > 0) {\n        updateProductPublish({\n          variables: {\n            ids: productIds,\n            published: true\n          }\n        })\n      }\n    }\n    const updateToUnpublish = () => {\n      if (inventoryIds.length > 0) {\n        updateInventoryPublish({\n          variables: {\n            ids: inventoryIds,\n            published: false\n          }\n        })\n      }\n      if (productIds.length > 0) {\n        updateProductPublish({\n          variables: {\n            ids: productIds,\n            published: false\n          }\n        })\n      }\n    }\n    return (\n      <div style={{display: 'flex'}}>\n        <Button type=\"primary\" size=\"small\" onClick={updateToPublish} style={{marginRight: '5px'}} disabled={!displaySelectionPanel}>Publish</Button>\n        <Button size=\"small\" onClick={updateToUnpublish} disabled={!displaySelectionPanel}>Unpublish</Button>\n      </div>\n    )\n  }\n\n  const rowSelection = {\n    onChange: (selectedRowKeys, selectedRows) => {\n      setSelectedItems(selectedRows);\n      // console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n    },\n    onSelect: (record, selected, selectedRows) => {\n      // console.log(record, selected, selectedRows);\n    },\n    onSelectAll: (selected, selectedRows, changeRows) => {\n      // console.log(selected, selectedRows, changeRows);\n    },\n  };\n\n  const getTableData = () => {\n    let result = [];\n    if (productsData && inventoryData && !error && !inventoryError) {\n      let inventoryWithKey = inventoryData.inventory.map((anInventory)=>{ return {...anInventory, key: anInventory._id} });\n      productsData.products.map((aProduct,index)=>{\n        let productInventory = inventoryWithKey.filter((anInventory)=>anInventory.productId == aProduct._id);\n        aProduct['key'] = aProduct._id;\n        if (productInventory.length > 0) {\n          aProduct['children'] = productInventory;\n        }\n        result.push(aProduct)\n      });\n    }\n    return result;\n  }\n\n  let hasSelected = selectedItems.length > 0 ? true : false;\n\n  return (\n    <Page_01\n      title={\"Inventory\"}\n      extra={[\n        <Button key=\"create\" type=\"primary\" icon={<PlusOutlined />} onClick={()=>{handleOnClickProduct(null)}} />\n      ]}\n    >\n      <Table \n        columns={columns} \n        rowSelection={rowSelection} \n        dataSource={getTableData()} \n        pagination={false}\n        scroll={{x: columns.length * 150}}\n        size={'small'}\n      />\n      <div className={`inventory-selectionPanel ${displaySelectionPanel ? 'open' : 'close'}`}>\n        {selectionPanel()}\n      </div>\n\n      <ProductForm\n        // product props\n        product={selectedProduct} \n        categories={productsData && productsData.products ? getAllProductCategory(productsData.products) : []}\n        refetch={refetchData}\n\n        // modal props\n        modalVisible={productFormModal}\n        closeModal={handleProductFormModalClose}\n      />\n    </Page_01>\n  )\n}\n\nexport default Inventory;\n","import React from 'react';\nimport { Modal, Divider, Descriptions, List, Avatar } from 'antd';\nimport { format } from 'date-fns';\n\nimport { useConfigCache } from '../../../utils/Constants';\n\n\nconst OrderInfo = (props) => {\n  const { order, closeModal, visible, ... restProps } = props;\n  const config = useConfigCache();\n\n  const orderItems = (item) => {\n    let title = item.product.name;\n    let variant = \"\";\n    let variantKeys = Object.keys(item.variant);\n    variantKeys.map((aKey, index)=>{\n      variant += `${aKey}: ${item.variant[aKey]}${index == variantKeys.length -1 ? \"\" : \", \"}`\n    })\n\n    let imageSrc = \"\";\n    if (config && item.product.image) {\n      imageSrc = config.imageSrc + item.product.image;\n    }\n    return (\n      <List.Item\n        actions={[\n          \"qty: \" + item.qty,\n          \"price: \" + item.price\n        ]}\n      >\n        <List.Item.Meta\n          avatar={\n            <Avatar shape=\"square\" src={imageSrc} />\n          }\n          title={title}\n          description={variant}\n        />\n      </List.Item>\n    )\n  }\n  return (\n    <Modal\n      title={\"Order\"}\n      width={'95%'}\n      visible={visible}\n      onCancel={closeModal}\n      footer={null}\n      //destroyOnClose\n      wrapClassName={'products-modalWrapper'}\n      style={{overflow:\"hidden\"}}\n    >\n    {\n      order ?\n      <React.Fragment>\n        <Divider orientation=\"left\">订单</Divider>\n        <Descriptions \n            size=\"small\"\n            bordered\n            column={{ xxl: 2, xl: 2, lg: 2, md: 2, sm: 1, xs: 1 }}\n        >\n            <Descriptions.Item label=\"编号\">{order._id}</Descriptions.Item>\n            <Descriptions.Item label=\"订购日期\">{format(new Date(order.createdAt), \"MM/dd/yyyy hh:mm:ss aa\")}</Descriptions.Item>\n            <Descriptions.Item label=\"付款状态\">\n                {\n                  order.paid ? \n                    <span style={{\"color\":\"green\"}}>已付款</span> : <span style={{\"color\":\"red\"}}>待付款</span>\n                }\n            </Descriptions.Item>\n            <Descriptions.Item label=\"货物状态\">{order.sentOut ? <span style={{\"color\":\"green\"}}>已出货 <small> (运单号: {order.trackingNum})</small></span>:<span style={{\"color\":\"red\"}}>未出货</span>}</Descriptions.Item>\n        </Descriptions>\n        <Divider orientation=\"left\">收件人</Divider>\n        <Descriptions \n            id=\"buyerInfoTable\"\n            size=\"small\"\n            bordered\n            column={{ xxl: 1, xl: 1, lg: 1, md: 1, sm: 1, xs: 1 }}\n        >\n            <Descriptions.Item label=\"名字\">{order.customer.name}</Descriptions.Item>\n            <Descriptions.Item label=\"电话号码\">contact</Descriptions.Item>\n            <Descriptions.Item label=\"收件地址\">address</Descriptions.Item>\n        </Descriptions>\n        <Divider orientation=\"left\">购买列表</Divider> \n        <List\n          itemLayout=\"horizontal\"\n          dataSource={order.items}\n          renderItem={orderItems}\n          //bordered\n          footer={(\n            <div className=\"orderInfo-item-summary\">\n              Total: {order.total}\n            </div>\n          )}\n        />\n      </React.Fragment>\n      : \"Not found\"\n    }\n  \n    </Modal>\n  )\n}\n\nexport default OrderInfo;","import React, {useState} from 'react';\nimport { Tabs, Table, Button, Input, Popconfirm } from 'antd';\nimport { format } from 'date-fns';\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { CheckOutlined } from '@ant-design/icons';\n\nimport Page_01 from './component/Page_01';\nimport OrderInfo from './component/OrderInfo';\n\nconst { TabPane } = Tabs;\nconst { Search } = Input;\n\nconst GET_ORDERS_QUERY = gql`\n  query orders($filter: JSONObject) {\n    orders(filter: $filter) {\n      _id\n      createdAt\n      updatedAt\n      items\n      total\n      customer\n      paid\n      sentOut\n      trackingNum\n    }\n  }\n`;\n\nconst UPDATE_ORDER_PAYMENT_QUERY = gql`\n  mutation updateOrderPayment($_id: String!, $paid: Boolean!) {\n    updateOrderPayment(_id: $_id, paid: $paid) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst UPDATE_ORDER_DELIVERY_QUERY = gql`\n  mutation updateOrderDelivery($_id: String!, $trackingNum: String) {\n    updateOrderDelivery(_id: $_id, trackingNum: $trackingNum) {\n      success\n      message\n      data\n    }\n  }\n`;\n\nconst CANCEL_ORDER_QUERY = gql`\n  mutation cancelOrder($_id: String!) {\n    cancelOrder(_id: $_id) {\n      success\n      message\n      data\n    }\n  }\n`;\nconst Orders = (props) => {\n\n  const [ orderModalDisplay, setOrderModalDisplay ] = useState(false);\n  const [ selectedOrder, setSelectedOrder ] = useState(null);\n\n  const { data, loading, error, refetch: refetchOrders } = useQuery(GET_ORDERS_QUERY, {\n    fetchPolicy: \"cache-and-network\",\n    variables: {\n      filter: {\n        sorter: {\n          createdAt: 'desc'\n        }\n      }\n    },\n    onError: (error) => {\n      console.log(\"products error\", error)\n\n    },\n    onCompleted: (result) => {\n      \n    }\n  });\n\n  const [ updateOrderPayment , updateOrderPaymentResult ] = useMutation(UPDATE_ORDER_PAYMENT_QUERY,{\n    onCompleted: (result) => {\n      refetchOrders()\n    }\n  })\n\n  const [ updateOrderDelivery , updateOrderDeliveryResult ] = useMutation(UPDATE_ORDER_DELIVERY_QUERY,{\n    onCompleted: (result) => {\n      refetchOrders()\n    }\n  })\n\n  const [ cancelOrder , cancelOrderResult ] = useMutation(CANCEL_ORDER_QUERY,{\n    onCompleted: (result) => {\n      refetchOrders()\n    }\n  })\n\n  const handleOrderModalDisplayOpen = (selectedOrder) => {\n    setOrderModalDisplay(true);\n    setSelectedOrder(selectedOrder)\n  }\n  const handleOrderModalDisplayClose = () => {\n    setOrderModalDisplay(false);\n  }\n\n  const defaultColumns = [\n    {\n      title: \"No.\",\n      dataIndex: 'index',\n      key: 'index',\n      width: 75,\n      render: (text, record, index) => {\n        return `${index + 1}.`;\n      }\n    },\n    {\n      title: \"订购日期\",\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      sorter: (a, b) => new Date(a.createdAt) - new Date(b.createdAt),\n      render: (text, record) => {\n        let dateTime = format(new Date(text), \"MM/dd/yyyy hh:mm:ss aa\")\n        return dateTime;\n      }\n    },\n    {\n      title: \"订单编号\",\n      dataIndex: '_id',\n      key: '_id',\n      render: (text, record) => {\n        return (\n          <a style={{whiteSpace:\"pre-wrap\", textDecoration:\"underline\"}} onClick={()=>{handleOrderModalDisplayOpen(record)}}>{record._id.toUpperCase()}</a>\n        )\n      }\n    },\n    {\n      title: \"收货人\",\n      dataIndex: 'customer',\n      key: 'customer',\n      sorter: (a, b) => a.name - b.name,\n      render: (text, record) => {\n        return text.name;\n      }\n    },\n    {\n      title: \"总计\",\n      dataIndex: 'total',\n      key: 'total',\n      sorter: (a, b) => a.total - b.total\n    }\n  ]\n\n  // {\n  //   title: \"货物状态\",\n  //   dataIndex: 'sentOut',\n  //   key: 'sentOut',\n  //   //width: 200,\n  //   render: (text, record) => {\n  //     return 'haha'\n  //   }\n  // },\n\n  let emptyTablePlaceholder = (\n      <div>空空如也</div>\n  )\n\n  const getColumnsByTable = () => {\n    \n    let tableCol1 = [...defaultColumns, ...[\n      {\n        title: \"付款状态\",\n        dataIndex: 'paid',\n        key: 'paid',\n        render: (text, record) => {\n          const handleUpdatePayment = () => {\n            updateOrderPayment({\n              variables: {\n                _id: record._id,\n                paid: !record.paid\n              }\n            })\n          }\n          return (<Button size=\"small\" type={`${text ? \"primary\" : \"danger\"}`} onClick={handleUpdatePayment}>{text ? \"已付款\" : \"未付款\"}</Button>)\n        }\n      },\n      {\n        title: \"\",\n        dataIndex: 'action',\n        key: 'action',\n        render: (text, record) => {\n          const handleCancelOrder = () => {\n            cancelOrder({\n              variables: {\n                _id: record._id\n              }\n            })\n          }\n          return (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={handleCancelOrder}>\n              {/* <div style={{width: '100%', textAlign: 'center', cursor: 'pointer'}}>取消</div> */}\n          <Button type=\"danger\" size=\"small\">取消</Button>\n\n          {/* <Button type=\"danger\" size=\"small\" onClick={handleCancelOrder}>取消</Button> */}\n            </Popconfirm>\n          )\n        } \n      }\n    ]];\n    \n    let tableCol2 = [...defaultColumns, ...[\n      {\n        title: \"付款状态\",\n        dataIndex: 'paid',\n        key: 'paid',\n        render: (text, record) => {\n          const handleUpdatePayment = () => {\n            updateOrderPayment({\n              variables: {\n                _id: record._id,\n                paid: !record.paid\n              }\n            })\n          }\n          return (<Button type={`${text ? \"primary\" : \"danger\"}`} size=\"small\" onClick={handleUpdatePayment}>{text ? \"已付款\" : \"未付款\"}</Button>)\n        }\n      },\n      {\n        title: \"Tracking No.\",\n        dataIndex: 'trackingNum',\n        key: 'trackingNum',\n        width: 200,\n        render: (text, record) => {\n          let result = null;\n          if (record.sentOut && text) {\n            result = (\n              <div>{text}</div>\n            )\n          }\n          else {\n            const handleUpdateDelivery = (value) => {\n              updateOrderDelivery({\n                variables: {\n                  _id: record._id,\n                  trackingNum: value\n                }\n              })\n            }\n            result = (\n              <Search\n                placeholder=\"Enter tracking no.\"\n                enterButton={(<CheckOutlined />)}\n                size=\"small\"\n                onSearch={handleUpdateDelivery}\n              />\n            )\n          }\n          return result;\n        } \n      }\n    ]]\n\n    let tableCol3 = [...defaultColumns, ...[\n      {\n        title: \"Last Updated\",\n        dataIndex: 'updatedAt',\n        key: 'updatedAt',\n        sorter: (a, b) => new Date(a.updatedAt) - new Date(b.updatedAt),\n        render: (text, record) => {\n          let dateTime = format(new Date(text), \"MM/dd/yyyy hh:mm:ss aa\")\n          return dateTime;\n        }\n      },\n      {\n        title: \"Tracking No.\",\n        dataIndex: 'trackingNum',\n        key: 'trackingNum',\n        render: (text, record) => {\n          return text\n        } \n      }\n    ]]\n\n    return {\n      newOrders: tableCol1,\n      paidOrders: tableCol2,\n      completedOrders: tableCol3\n    }\n  }\n\n  const getFilteredOrders = () => {\n    let allOrders = data ? data.orders : [];\n    let orderList1 = [];\n    let orderList2 = [];\n    let orderList3 = [];\n    allOrders.map((anOrder)=>{\n      if (!anOrder.paid && !anOrder.sentOut) {\n        orderList1.push(anOrder);\n      }\n      else if (anOrder.paid && !anOrder.sentOut) {\n        orderList2.push(anOrder);\n      }\n      else if (anOrder.paid && anOrder.sentOut) {\n        orderList3.push(anOrder);\n      }\n    });\n    return {\n      newOrders: orderList1,\n      paidOrders: orderList2,\n      completedOrders: orderList3\n    }\n  }\n\n  let filteredColumns = getColumnsByTable();\n  let filteredOrders = getFilteredOrders();\n\n  const colWidth = 100;\n  return (\n    <Page_01\n      title={\"Orders\"}\n      //extra={[\n      //  <Button key=\"create\" type=\"primary\" icon={<PlusOutlined />} />\n      //]}\n    >\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"New Orders\" key=\"1\">\n          <Table\n            rowKey={'_id'}\n            columns={filteredColumns.newOrders} \n            dataSource={filteredOrders.newOrders} \n            pagination={false}\n            size=\"small\"\n            scroll={{x: filteredColumns.newOrders.length * colWidth}}\n            footer={null}\n            //locale={{emptyText:emptyTablePlaceholder}}\n          />\n        </TabPane>\n        <TabPane tab=\"Paid Orders\" key=\"2\">\n          <Table\n            rowKey={'_id'}\n            columns={filteredColumns.paidOrders} \n            dataSource={filteredOrders.paidOrders} \n            pagination={false}\n            size=\"small\"\n            scroll={{x: filteredColumns.paidOrders.length * colWidth}}\n            footer={null}\n            //locale={{emptyText:emptyTablePlaceholder}}\n          />\n        </TabPane>\n        <TabPane tab=\"Completed Orders\" key=\"3\">\n          <Table\n            rowKey={'_id'}\n            columns={filteredColumns.completedOrders} \n            dataSource={filteredOrders.completedOrders} \n            pagination={false}\n            size=\"small\"\n            scroll={{x: filteredColumns.completedOrders.length * colWidth}}\n            footer={null}\n            //locale={{emptyText:emptyTablePlaceholder}}\n          />\n        </TabPane>\n      </Tabs>\n      <OrderInfo\n        order={selectedOrder}\n        visible={orderModalDisplay}\n        closeModal={handleOrderModalDisplayClose}\n      />\n    </Page_01>\n  )\n}\n\nexport default Orders;","import React from 'react';\nimport { Route, Redirect, useLocation } from 'react-router-dom';\nimport { useUserCache } from '../Constants';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  let routeLocation = useLocation();\n  const defaultRoute = \"/login\";\n\n  const userResult = useUserCache();\n  let loggedIn = false;\n  if (userResult && userResult.success) {\n    loggedIn = true;\n  }\n  return (\n    // Show the component only when the user is logged in\n    // Otherwise, redirect the user to /signin page\n    <Route {...rest} render={props => (\n      loggedIn ?\n        <Component {...props} />\n        : <Redirect to={{\n                  pathname: defaultRoute,\n                  state: { from: routeLocation }\n              }} />\n    )} />\n  );\n};\n\nexport default PrivateRoute;\n\n/*\ntype of page route\nprivate route = only user who logged in can see\neg. products/inventory pages\n\npublic route (not restricted) = anyone can see\neg. main page/not sensitive info\n\npublic route (restricted) = only user who is not logged in can see\neg. login page\n\n*/","import React, {useEffect} from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useUserCache, useConfigCache } from '../Constants';\n\nconst PublicRoute = ({ component: Component, restricted, ...rest }) => {\n  const defaultRoute = \"/\";\n  const userResult = useUserCache();\n  const configResult = useConfigCache();\n  \n  let loggedIn = false;\n  if (userResult && userResult.success && configResult) {\n    loggedIn = true;\n  }\n\n  return (\n    // restricted = false meaning public route\n    // restricted = true meaning restricted route\n    <Route {...rest} render={props => (\n      loggedIn && restricted ?\n        <Redirect to={defaultRoute} />\n        : <Component {...props} />\n    )} />\n  );\n};\n\nexport default PublicRoute;","import React from 'react';\n\nconst PageNotFound = () => {\n    return (\n        <div>\n            404: Page Not Found\n        </div>\n    )\n}\n\nexport default PageNotFound;","import React, {useState, useEffect} from 'react';\nimport {\n  BrowserRouter,\n  Route,\n  Switch\n} from 'react-router-dom';\nimport { useQuery, useLazyQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nimport logo from './logo.svg';\n\nimport './css/index.css';\n\nimport * as Component from './component/index.js';\nimport Login from './component/page/Login';\nimport Products from './component/page/Products';\nimport Inventory from './component/page/Inventory';\nimport Orders from './component/page/Orders';\nimport Page_01 from './component/page/component/Page_01';\n\nimport PrivateRoute from './utils/component/PrivateRoute';\nimport PublicRoute from './utils/component/PublicRoute';\nimport PageNotFound from './utils/component/PageNotFound';\nimport Loading from './utils/component/Loading';\nimport { setUserCache, setConfigCache, useUserCache, useConfigCache } from './utils/Constants';\n\n\nlet Component_Layout = Component['Layout_01'];\nlet Component_Header = Component['Header_01'];\n// let Component_Footer = Component['Header_01'];\n\nconst GET_LOGGED_IN_USER = gql`\n  query loggedInUser{\n    loggedInUser{\n        success\n        message\n        data\n    }\n  }\n`\n\nconst GET_USER_CONFIG = gql`\n  query userConfig($configId: String!) {\n    userConfig(configId: $configId) {\n        success\n        message\n        data\n    }\n  }\n`\n\nconst App = (props) => {\n  const [ loggedIn, setLoggedIn ] = useState(false);\n  const { data, error, loading, refetch } = useQuery(GET_LOGGED_IN_USER,{\n    fetchPolicy: 'cache-and-network',\n    onCompleted: (result) => {\n      if (result && result.loggedInUser && result.loggedInUser.success) {\n        // setUserCache(result.loggedInUser);\n        fetchConfig({\n          variables: {\n            configId: result.loggedInUser.data.configId\n          }\n        })\n      }\n    },\n    onError: (err) => {\n      console.log(err)\n      setLoggedIn(false)\n    }\n  });\n\n  const [ fetchConfig, { data: configData, error: configError, loading: configLoading }] = useLazyQuery(GET_USER_CONFIG,{\n    fetchPolicy: 'cache-and-network',\n    onCompleted: (result) => {\n      if (result && result.userConfig && result.userConfig.success) {\n        setConfigCache(result.userConfig.data)\n        setUserCache(data.loggedInUser);\n        setLoggedIn(true)\n\n      }\n    }\n  });\n\n  const userCache = useUserCache();\n  const configCache = useConfigCache();\n\n  useEffect(()=>{\n    if (userCache && userCache.success && configCache) {\n      setLoggedIn(true)\n    }\n    else {\n      setLoggedIn(false)\n    }\n  },[userCache,configCache]);\n\n  const Main = () => {\n    return (\n      <div>\n        Main\n      </div>\n    )\n  }\n\n  if (loading || configLoading) return <Loading/>;\n  if (error) console.log(`error: ${error}`);\n\n  return (\n    <Component_Layout\n      header={loggedIn ? (<Component_Header setLoggedIn={setLoggedIn}/>) : null}\n      footer={loggedIn ? \"2020\" : null}\n    >\n      <Switch>\n        <PublicRoute restricted={true} exact path={'/login'} component={Login} />\n        {/* <PrivateRoute exact path={'/products'} component={Products}/> */}\n        <PrivateRoute exact path={'/'} component={Inventory}/>\n        <PrivateRoute exact path={'/main'} component={Main}/>\n        <PrivateRoute exact path={'/orders'} component={Orders}/>\n        <PrivateRoute exact path={'/configuration'} component={Main}/>\n        <Route component={PageNotFound} />\n      </Switch>\n    </Component_Layout>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { BrowserRouter } from 'react-router-dom';\nimport gql from \"graphql-tag\";\n\n// import './css/base.css';\nimport App from './App';\nimport ApolloClientAPI from './utils/ApolloClientAPI';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst theClientAPI = ApolloClientAPI();\nexport default theClientAPI;\nconst { client, cache, ...restClient } = theClientAPI;\n\nconst run = () => {\n\n  ReactDOM.render((\n    <BrowserRouter>\n      <ApolloProvider client={client}>\n          <App />\n      </ApolloProvider>\n    </BrowserRouter>\n  ),document.getElementById('root'));\n  \n}\n\nconst init = () => {\n  run();\n}\n\ninit();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}